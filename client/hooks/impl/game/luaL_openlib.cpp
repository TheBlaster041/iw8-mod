#include "common.hpp"
#include "hooks/hook.hpp"

#include <utility/flags.hpp>
#include <utility/nt.hpp>

#define LOG_LUA_FUNCTION_REGISTRY FALSE

std::map<std::string, std::string> s_NamedLUIFunctions{};

void InitNamedLUIFunctions() {
	if (!s_NamedLUIFunctions.empty()) {
		return;
	}

	// s_engineFunctions
	s_NamedLUIFunctions.emplace("EAIICIFIFA", "IsAliensMode");
	s_NamedLUIFunctions.emplace("EAAHGICFBD", "IsMultiplayer");
	s_NamedLUIFunctions.emplace("CAADCDEEIA", "IsSingleplayer");
	s_NamedLUIFunctions.emplace("ECHCFGDDDF", "IsCoreMode");
	s_NamedLUIFunctions.emplace("BHICADFIHA", "IsDevelopmentBuild");
	s_NamedLUIFunctions.emplace("BGAAHHAGAC", "IsDemoBuild");
	s_NamedLUIFunctions.emplace("HDGDBCJFG", "IsConsoleGame");
	s_NamedLUIFunctions.emplace("DDJFBBJAIG", "InFrontend");
	s_NamedLUIFunctions.emplace("CBBFHGEDGJ", "GetCurrentPlatform");
	s_NamedLUIFunctions.emplace("CFJGJBIDHI", "IsReplay");

	// Engine_methods
	s_NamedLUIFunctions.emplace("BHDAHAHGDF", "GetPreselectedCategory");
	s_NamedLUIFunctions.emplace("CAFBBGBAI", "GetPreselectedIndexInCategory");
	s_NamedLUIFunctions.emplace("DDFHHJEGHI", "GetPlaylistName");
	s_NamedLUIFunctions.emplace("CDGBFEJJGE", "GetPlaylistID");
	s_NamedLUIFunctions.emplace("CHFFDAHDIB", "GetItemVideo");
	s_NamedLUIFunctions.emplace("DIFGFDHIF", "GetItemFeaturedImage");
	s_NamedLUIFunctions.emplace("DCFCIFABGH", "GetLockState");
	s_NamedLUIFunctions.emplace("CDBBECIGIG", "DoAction_0");
	s_NamedLUIFunctions.emplace("CEBBBFJJEB", "DoPlaylistId");
	s_NamedLUIFunctions.emplace("EAAGDGCFFC", "GetPlaylistGameTypes");
	s_NamedLUIFunctions.emplace("CGJBAEBBG", "GetFiltered");
	s_NamedLUIFunctions.emplace("CBHGDIGEI", "SetFiltered");
	s_NamedLUIFunctions.emplace("FAHJDGFJI", "IsCategoryFiltered");
	s_NamedLUIFunctions.emplace("DDIDBIIJIF", "IsCategoryFeatured");
	s_NamedLUIFunctions.emplace("BIAICJCDDH", "IsCategoryHardcore");
	s_NamedLUIFunctions.emplace("BICHEFEAHB", "IsCategoryPromoted");
	s_NamedLUIFunctions.emplace("CCJCFIFHJA", "IsCategoryCDL");
	s_NamedLUIFunctions.emplace("CAFBGECBDJ", "IsCategoryBR");
	s_NamedLUIFunctions.emplace("DEJGAECIBG", "IsAnyPlaylistInCategoryRestrictF2P");
	s_NamedLUIFunctions.emplace("CFADJIBBED", "IsBRPlunderPostTutorial");
	s_NamedLUIFunctions.emplace("CBCDIIAFAA", "IsDMZPostTutorial");
	s_NamedLUIFunctions.emplace("CJJBCJHBIF", "IsSurvival");
	s_NamedLUIFunctions.emplace("FDGFJJGG", "IsSplitscreenRestricted");
	s_NamedLUIFunctions.emplace("IJJJJBEBG", "IsLimitedTime");

	// MLG_methods
	s_NamedLUIFunctions.emplace("DAJJHDCJIF", "SpectateNext");
	s_NamedLUIFunctions.emplace("EEIHBFIIF", "SpectatePrev");
	s_NamedLUIFunctions.emplace("CHBFFBFCFH", "SpectateClientnum");
	s_NamedLUIFunctions.emplace("GGHCHFBAD", "FollowClientnum");
	s_NamedLUIFunctions.emplace("IICEFCICE", "SetCamera");
	s_NamedLUIFunctions.emplace("DIIHDHICFJ", "SaveCameraPresets");
	s_NamedLUIFunctions.emplace("BEIGDFFCEB", "RestoreMemorizedCameraPose");
	s_NamedLUIFunctions.emplace("CFIAHGEGDC", "RegisterCameraPreset");
	s_NamedLUIFunctions.emplace("CEDDFGBFI", "MemorizeCurrentCameraPose");
	s_NamedLUIFunctions.emplace("EBCFFGFAGC", "LoadCameraPresets");
	s_NamedLUIFunctions.emplace("FBFGBEC", "IsMLGSpectator");
	s_NamedLUIFunctions.emplace("GADICIDED", "SetThirdPerson");
	s_NamedLUIFunctions.emplace("EDJIEDJ", "IsSpectating");
	s_NamedLUIFunctions.emplace("BEHHIDIBII", "HighlightClientNum");
	s_NamedLUIFunctions.emplace("DEIJHDGBJF", "GetSpectatedClientNum");
	s_NamedLUIFunctions.emplace("BCGAHIHIDE", "StopSpectate");
	s_NamedLUIFunctions.emplace("DGCCABADEF", "TogglePlayerOutlines");
	s_NamedLUIFunctions.emplace("CIJEAEBJJ", "SetPlayerOutlines");
	s_NamedLUIFunctions.emplace("CDIJCFCIHC", "SetPlayerOutlineColorMode");
	s_NamedLUIFunctions.emplace("CIJJCFAAEG", "SetPlayerOutlineViewMode");
	s_NamedLUIFunctions.emplace("CEJCGBAJ", "SetOutlineViewmodel");
	s_NamedLUIFunctions.emplace("BJGHHDDGFE", "IsNoteworthyKillstreakActive");
	s_NamedLUIFunctions.emplace("BIFDHCJIEG", "IsGametypeVIP");
	s_NamedLUIFunctions.emplace("CGBFEIFIFE", "IsSpecialActive");
	s_NamedLUIFunctions.emplace("EACEABCJFE", "GetKillstreakPoints");
	s_NamedLUIFunctions.emplace("BAHHIICAFF", "GetNextKillstreakCost");
	s_NamedLUIFunctions.emplace("DCCIBJGEAG", "GetMLGSettings");
	s_NamedLUIFunctions.emplace("DCJHAJAHAH", "GetMLGDefaultSettings");
	s_NamedLUIFunctions.emplace("DDCFEAFJE", "GetMLGTeamList");
	s_NamedLUIFunctions.emplace("HHCCBFFJA", "GetMLGPlayerList");
	s_NamedLUIFunctions.emplace("BDDBBCDDBJ", "GetMLGPlayerPortrait");
	s_NamedLUIFunctions.emplace("DFAIFEFDJI", "ReleaseMLGPlayerPortrait");
	s_NamedLUIFunctions.emplace("BEBCDDEAFJ", "GetMLGPlayerLogo");
	s_NamedLUIFunctions.emplace("BJJBBBAIJE", "ReleaseMLGPlayerLogo");
	s_NamedLUIFunctions.emplace("BIFBICFHID", "GetMLGTeamLogo");
	s_NamedLUIFunctions.emplace("CACGICCIHI", "MLGLobbyReorder");
	s_NamedLUIFunctions.emplace("DHACEBGICE", "SetPauseResumeGameStatus");
	s_NamedLUIFunctions.emplace("DEHBFHFDFJ", "SetGameBattleMatchId");
	s_NamedLUIFunctions.emplace("BIHFEHBCFB", "GetGameBattleMatchId");
	s_NamedLUIFunctions.emplace("BJCIIIEBJG", "GetCameraType");
	s_NamedLUIFunctions.emplace("BJFJBHJAJD", "IsFreeCamEnabled");
	s_NamedLUIFunctions.emplace("BCHHDEJBD", "IsAerialCamEnabled");
	s_NamedLUIFunctions.emplace("JIHGCIJCG", "IsGameBattleMatch");
	s_NamedLUIFunctions.emplace("CIGIDJACJB", "GetGameBattleMatchJoinState");
	s_NamedLUIFunctions.emplace("DHDGADDDII", "LoadGameBattlesRecipe");
	s_NamedLUIFunctions.emplace("BFBHGHFAEE", "GetClientLoadoutInfo");
	s_NamedLUIFunctions.emplace("CCEBJIBHBD", "SetListenIn");
	s_NamedLUIFunctions.emplace("BGAHIDIHH", "GetListenIn");
	s_NamedLUIFunctions.emplace("CAGJIDDHI", "SetWaypointsEnabled");
	s_NamedLUIFunctions.emplace("CCAFGFFCCC", "GetWaypointsEnabled");
	s_NamedLUIFunctions.emplace("EDFEDGHEH", "SetPlayerNumbersEnabled");
	s_NamedLUIFunctions.emplace("FBIBDEIDB", "GetPlayerNumbersEnabled");
	s_NamedLUIFunctions.emplace("JDBHAIFAB", "SetSelectedClientNum");
	s_NamedLUIFunctions.emplace("FGEJHEAAB", "GetSelectedClientNum");
	s_NamedLUIFunctions.emplace("DEFJAJGIJH", "GetGameBattleScheduleState");
	s_NamedLUIFunctions.emplace("DFJDECFDHI", "GetGameBattleScheduleMatchCount");
	s_NamedLUIFunctions.emplace("EBJFHEJBC", "GetGameBattleMatch");
	s_NamedLUIFunctions.emplace("DBHIJDDIFH", "GetCurrentGameBattleMatchIndex");
	s_NamedLUIFunctions.emplace("JCGCHDEIH", "GetGameBattleMatchTime");
	s_NamedLUIFunctions.emplace("CCHJBFADHF", "RefreshGameBattleSchedule");
	s_NamedLUIFunctions.emplace("DEBHJBICBJ", "ResetGameBattleSchedule");
	s_NamedLUIFunctions.emplace("BBBHAJHHEJ", "RefreshMatchHistory");
	s_NamedLUIFunctions.emplace("DJHDFDDCAD", "GetMatchHistoryState");
	s_NamedLUIFunctions.emplace("CBEGGIIBGE", "InviteGameBattleMatchMembers");
	s_NamedLUIFunctions.emplace("CGJCACCIDH", "GetGameBattleAccountState");
	s_NamedLUIFunctions.emplace("DEEAEDDFCA", "RefreshGameBattleAccountState");
	s_NamedLUIFunctions.emplace("ECGFBCBIGB", "GetGameBattleMatchReportState");
	s_NamedLUIFunctions.emplace("CCDAACIBHF", "HasCodcasterClientMatchData");
	s_NamedLUIFunctions.emplace("JDDEIBJ", "GetCodcasterClientMatchData");
	s_NamedLUIFunctions.emplace("DFHFIFFCHB", "SetActiveGameIndex");
	s_NamedLUIFunctions.emplace("DBIAGEJFFF", "GetActiveGameIndex");
	s_NamedLUIFunctions.emplace("CJJJICBIDE", "GameModeSupportsCodcaster");
	s_NamedLUIFunctions.emplace("IJEIFEIAG", "JoinGameBattleMatchLobby");
	s_NamedLUIFunctions.emplace("IBGIEADG", "RequestMatchExpiredCheck");
	s_NamedLUIFunctions.emplace("EBEAGADAFA", "GetMatchExpiredCheckResult");
	s_NamedLUIFunctions.emplace("JAIGJGGF", "LeaveGameBattleMatchLobby");
	s_NamedLUIFunctions.emplace("CCBFCDCBJG", "IsMLGFollowDroneActive");
	s_NamedLUIFunctions.emplace("DCJHJJGCJE", "FollowDrone");
	s_NamedLUIFunctions.emplace("GFIFIGIFH", "SendGameBattleNoShowReport");
	s_NamedLUIFunctions.emplace("JCCEAHGCE", "SetCameraType");
	s_NamedLUIFunctions.emplace("DBBFBFCCEA", "GetTournamentInfo");
	s_NamedLUIFunctions.emplace("DBIBHEAEGD", "IsCDLClient");
	s_NamedLUIFunctions.emplace("DIJEHAFJDJ", "SwapTeamOrder");
	s_NamedLUIFunctions.emplace("EACIEIHFGC", "IsMLGCameraTetherToPlayer");
	s_NamedLUIFunctions.emplace("BEEEEFDBCD", "FocusSpectatedPlayer");
	s_NamedLUIFunctions.emplace("DEEGGAFDHF", "SetFocusedPlayer");
	s_NamedLUIFunctions.emplace("CJDDHJBCCI", "GetPlayerstateClientnum");
	s_NamedLUIFunctions.emplace("BIFGHAHJBA", "SetAerialHeightLimits");
	s_NamedLUIFunctions.emplace("DJHHBEFCJD", "ClearAerialHeightLimits");
	s_NamedLUIFunctions.emplace("BBAJACDGI", "IsAerialEnabled");
	s_NamedLUIFunctions.emplace("BCEGDHGFIC", "SetAerialEnabled");
	s_NamedLUIFunctions.emplace("DDEGCFHDCC", "InitGlobalTints");
	s_NamedLUIFunctions.emplace("BHEBFGBJDC", "LaunchSonyAccountLinking");
	s_NamedLUIFunctions.emplace("HBCJGDEBA", "LaunchSonyTournamentList");
	s_NamedLUIFunctions.emplace("BGGFEEDBGA", "IsPlayerWhitelisted");
	s_NamedLUIFunctions.emplace("EAJACAJIHI", "SetLocalCommitReady");
	s_NamedLUIFunctions.emplace("BFEDICDJJE", "GetLocalCommitReady");
	s_NamedLUIFunctions.emplace("DAIBFGCGF", "ClearLocalCommitReady");
	s_NamedLUIFunctions.emplace("DIDBJAGCDI", "SetLocalInputType");
	s_NamedLUIFunctions.emplace("CDABGAAAEI", "AerialFocusNearestPlayer");
	s_NamedLUIFunctions.emplace("DEHIAGCHBD", "GetNavigationDestination");
	s_NamedLUIFunctions.emplace("CJAJGICGJB", "OnNavigationComplete");
	s_NamedLUIFunctions.emplace("DHJCBAAHII", "StartMatch");
	s_NamedLUIFunctions.emplace("DEEBFIGGJE", "RefreshCurrentMatch");
	s_NamedLUIFunctions.emplace("DCHFBHFJDG", "AerialFocusBarycenter");
	s_NamedLUIFunctions.emplace("CHHGCCAEHH", "TraceState");

	// s_Clans_methods
	s_NamedLUIFunctions.emplace("DGAGIABGFJ", "CreateClan");
	s_NamedLUIFunctions.emplace("CEACCICGB", "GetJoinedClans");
	s_NamedLUIFunctions.emplace("GIDGAGEAC", "GetClanMembers");
	s_NamedLUIFunctions.emplace("GFFJCJFIJ", "GetClanDetails");
	s_NamedLUIFunctions.emplace("DGGFBEFIBC", "GetClanNumMembers");
	s_NamedLUIFunctions.emplace("HAHBJIIFJ", "GetClanNumOnlineMembers");
	s_NamedLUIFunctions.emplace("BFCDHGIGGC", "GetClanOwner");
	s_NamedLUIFunctions.emplace("FAFJFADBJ", "SetActiveClan");
	s_NamedLUIFunctions.emplace("CFGBBBHFHB", "GetActiveClan");
	s_NamedLUIFunctions.emplace("DBGGAGHJDG", "LeaveClan");
	s_NamedLUIFunctions.emplace("DFEAHHEHGJ", "IsActiveClan");
	s_NamedLUIFunctions.emplace("BGJDIAAACD", "SetHappyHour");
	s_NamedLUIFunctions.emplace("CBJDIGCAED", "GetHappyHour");
	s_NamedLUIFunctions.emplace("EBDFICHCEJ", "GetClanInvites");
	s_NamedLUIFunctions.emplace("BJJADIBFB", "GetOutgoingClanInvites");
	s_NamedLUIFunctions.emplace("DIEAGEDBCC", "InviteMember");
	s_NamedLUIFunctions.emplace("DCADIAJCII", "InviteMemberByName");
	s_NamedLUIFunctions.emplace("CFJCAAHHGE", "RevokeInvitation");
	s_NamedLUIFunctions.emplace("BJFFGACEBD", "RemoveMember");
	s_NamedLUIFunctions.emplace("BJDBJGDJBB", "PromoteToOwner");
	s_NamedLUIFunctions.emplace("DIHIDEGEA", "PromoteToOfficer");
	s_NamedLUIFunctions.emplace("DBAJADFEG", "DemoteToMember");
	s_NamedLUIFunctions.emplace("CHEADIHHBJ", "GetMember");
	s_NamedLUIFunctions.emplace("CFDHGBFICH", "GetMemberRole");
	s_NamedLUIFunctions.emplace("IEHDGEGJC", "AcceptClanInvite");
	s_NamedLUIFunctions.emplace("DJIFJAAFAI", "DeclineClanInvite");
	s_NamedLUIFunctions.emplace("CAIICFABDD", "GetAlwaysBlockClanInvites");
	s_NamedLUIFunctions.emplace("JIFHCFFD", "SetAlwaysBlockClanInvites");

	// OnScreenKeyboard_methods
	s_NamedLUIFunctions.emplace("CBJGJDGFC", "OpenScreenKeyboard");
	s_NamedLUIFunctions.emplace("CJAFGACAFH", "CheckStringValidityAndProfanity");
	s_NamedLUIFunctions.emplace("IFIICDEDG", "TriggerVirtualKeyboardCallback");
	s_NamedLUIFunctions.emplace("FCIEJBIHA", "IsScreenKeyboardActive");

	// s_dataModelFunctions
	s_NamedLUIFunctions.emplace("EAABFJFCAG", "CreateModel");
	s_NamedLUIFunctions.emplace("ECHJFCGHJI", "UnsubscribeAndFreeModel");
	s_NamedLUIFunctions.emplace("CICAGFJFEH", "GetGlobalModel");
	s_NamedLUIFunctions.emplace("DGADFJACCI", "GetModel");
	s_NamedLUIFunctions.emplace("DJJHBDCEAB", "GetModelForController");
	s_NamedLUIFunctions.emplace("DEDCDIFJHG", "GetModelForOmnvar");
	s_NamedLUIFunctions.emplace("JJEHAEBDF", "GetModelValue");
	s_NamedLUIFunctions.emplace("DBEBGEAJHJ", "SetModelValue");

	// Fencing_methods
	s_NamedLUIFunctions.emplace("BCIHDFJDEJ", "OnlineServicesRequest");
	s_NamedLUIFunctions.emplace("CCFEHFAFH", "OnlineServicesGetState");
	s_NamedLUIFunctions.emplace("BHICCDHGCG", "OnlineServicesResetState");
	s_NamedLUIFunctions.emplace("CFFIJIBGA", "OnlineDataRequest");
	s_NamedLUIFunctions.emplace("CIHFIEHIDE", "OnlineDataGetState");
	s_NamedLUIFunctions.emplace("CFIIIAEBDD", "OnlineDataResetState");
	s_NamedLUIFunctions.emplace("IBEEFACJG", "PatchGetState");
	s_NamedLUIFunctions.emplace("BDFABHEGGA", "PatchGetProgress");
	s_NamedLUIFunctions.emplace("BDCICIIGD", "PatchResetState");
	s_NamedLUIFunctions.emplace("BFFJDDCAI", "PatchRestart");
	s_NamedLUIFunctions.emplace("DIDICIBJAC", "FenceSpinnerGetState");
	s_NamedLUIFunctions.emplace("ECCCADFEDB", "FenceSpinnerGetSuccessShowPopup");
	s_NamedLUIFunctions.emplace("CEDAAIBBCB", "FenceSpinnerGetFailureAction");
	s_NamedLUIFunctions.emplace("CABJICFBDA", "FenceSpinnerReset");
	s_NamedLUIFunctions.emplace("BGCHCGICDB", "OfflineDataFetched");
	s_NamedLUIFunctions.emplace("DEDGHGJAJC", "NetworkingStarted");
	s_NamedLUIFunctions.emplace("CDGIDCIBID", "PlaylistsGetState");
	s_NamedLUIFunctions.emplace("CEEDFDDICC", "StatsResetGetState");
	s_NamedLUIFunctions.emplace("EBIGGFFHD", "StatsResetProceed");
	s_NamedLUIFunctions.emplace("DAGCJDHEGH", "HasMultiLoginError");
	s_NamedLUIFunctions.emplace("BDEBEIHECI", "ShouldFenceSignInShowErrorPopup");
	s_NamedLUIFunctions.emplace("BHDGFCBAGE", "HasPlayerBannedFlag");
	s_NamedLUIFunctions.emplace("DCGBFAFCCF", "ClearPlayerBanFlags");
	s_NamedLUIFunctions.emplace("BIDGFFEBCD", "IsContentEnumerationDone");
	s_NamedLUIFunctions.emplace("CDHAHDBJGB", "OwnershipStatusFenceStart");
	s_NamedLUIFunctions.emplace("DICBGGDGBA", "HasOwnershipStatusFenceTimedOut");
	s_NamedLUIFunctions.emplace("CHIHIIABIG", "GetPlayerBannedType");
	s_NamedLUIFunctions.emplace("DAGCHFFCBC", "ClearPlayerBanType");
	s_NamedLUIFunctions.emplace("CHBEJGEFFG", "GetStatusStringForAllFences");
	s_NamedLUIFunctions.emplace("IABFCACDD", "PrintStatusStringForAllFences");
	s_NamedLUIFunctions.emplace("GADAACFC", "GetStatusStringForRootFenceNotPassingForOnlineData");

	// Character_MP_methods
	s_NamedLUIFunctions.emplace("DFHIIAGHDG", "SetCharacterModels");
	s_NamedLUIFunctions.emplace("FHCIHJDAB", "SetCharacterWeapons");
	s_NamedLUIFunctions.emplace("DGGEBHHGJG", "SetCharacterWeaponVisible");
	s_NamedLUIFunctions.emplace("BFCIBJIIAB", "SetCharacterAkimbo");
	s_NamedLUIFunctions.emplace("GHFDEGFFJ", "SetCharacterOffset");
	s_NamedLUIFunctions.emplace("DDHJHDEHFG", "SetCharacterRotation");
	s_NamedLUIFunctions.emplace("DJEGBAEGJC", "SetCharacterVisible");
	s_NamedLUIFunctions.emplace("IJFGGGBAB", "GetCharacterLoaded");
	s_NamedLUIFunctions.emplace("EBDDCJHAHD", "GetCharacterStreamed");
	s_NamedLUIFunctions.emplace("DBDJAAEGDH", "GetCharacterEntityNum");
	s_NamedLUIFunctions.emplace("CAECDIHFCF", "PlayCharacterAnim");
	s_NamedLUIFunctions.emplace("BHJJGDDGFI", "QueueCharacterAnim");
	s_NamedLUIFunctions.emplace("DBHGHFFHFD", "ClearCharacterAnimQueue");
	s_NamedLUIFunctions.emplace("CAGDDGEFAJ", "PlayCharacterFacialAnim");
	s_NamedLUIFunctions.emplace("DCECEDGHEG", "GetCurrentAnimName");
	s_NamedLUIFunctions.emplace("EACGJBFDCA", "IsUsingModel");

	// ClientWeapon_methods
	s_NamedLUIFunctions.emplace("BCBABJCDFG", "SetWeaponModel");
	s_NamedLUIFunctions.emplace("DGIGCACFCA", "SetWeaponOffset");
	s_NamedLUIFunctions.emplace("EAADFDDHJF", "SetWeaponRotation");
	s_NamedLUIFunctions.emplace("BJDAEAFFA", "SetWeaponRotationGoal");
	s_NamedLUIFunctions.emplace("CEFJAHCDGA", "SetWeaponRotationCenter");
	s_NamedLUIFunctions.emplace("BHDGACCFEF", "SetWeaponVisible");
	s_NamedLUIFunctions.emplace("DFEJJEAEEF", "SetWeaponIsViewModel");
	s_NamedLUIFunctions.emplace("GGIJABIHF", "SetWeaponAllowDefault");
	s_NamedLUIFunctions.emplace("BFBGHICBEI", "SetWeaponHideDanglyBits");
	s_NamedLUIFunctions.emplace("CFJGGIAEJF", "SetWeaponIsWristwatch");
	s_NamedLUIFunctions.emplace("CHEJGGAFJE", "GetWeaponLoaded");
	s_NamedLUIFunctions.emplace("CJABBBHHFC", "GetWeaponEntityNum");
	s_NamedLUIFunctions.emplace("CCAGDACGCC", "SetWeaponCollisionPlaneEnabled");
	s_NamedLUIFunctions.emplace("CCGIDAEHBC", "SetWeaponResetDynBones");
	s_NamedLUIFunctions.emplace("BIJBFGJAHF", "PlayWeaponVFX");
	s_NamedLUIFunctions.emplace("BCFAAFHJII", "GetWeaponHyperburstEnabled");

	// ClientModel_methods
	s_NamedLUIFunctions.emplace("HJHDJDCBF", "LuaCallIsClientModelInitialized");
	s_NamedLUIFunctions.emplace("CBCGDIGGHB", "LuaCallSetClientModelModifiable");
	s_NamedLUIFunctions.emplace("GIDCAADHB", "GetClientModelIndex");
	s_NamedLUIFunctions.emplace("JBAEHFHCA", "SetClientModel");
	s_NamedLUIFunctions.emplace("DEEGIBCDJG", "SetClientModelPatchOrigin");
	s_NamedLUIFunctions.emplace("BEICGBEEHD", "SetClientModelAnimation");
	s_NamedLUIFunctions.emplace("DAFFBECEBF", "SetRequiredModifiables");

	// Streaming_methods
	s_NamedLUIFunctions.emplace("DDFJHJEIBI", "GetWeaponViewRequestLimit");
	s_NamedLUIFunctions.emplace("CHBBDIBHIH", "RequestWeaponViewModels");
	s_NamedLUIFunctions.emplace("GHDFFFCGE", "RequestWeaponWorldModels");
	s_NamedLUIFunctions.emplace("BBJEEBCIA", "RequestBodyModels");
	s_NamedLUIFunctions.emplace("DBGCBBJIAG", "RequestHeadModels");
	s_NamedLUIFunctions.emplace("CDEFABDIBG", "RequestHandViewModels");
	s_NamedLUIFunctions.emplace("DACIGAEDAE", "HasWeaponViewModels");
	s_NamedLUIFunctions.emplace("BJHEBDBACF", "HasWeaponWorldModels");
	s_NamedLUIFunctions.emplace("BIIFEBFBHJ", "HasBodyModels");
	s_NamedLUIFunctions.emplace("CIFJJEEIGF", "HasHeadModels");
	s_NamedLUIFunctions.emplace("EBHBADIBFB", "HasHandViewModels");
	s_NamedLUIFunctions.emplace("BDDBGGIC", "SetStreamingEnabled");
	s_NamedLUIFunctions.emplace("BACFJGBIC", "GetStreamingEnabled");
	s_NamedLUIFunctions.emplace("GIECGFJBB", "TouchXModel");
	s_NamedLUIFunctions.emplace("BJEHADFHFD", "AddStreamedImages");
	s_NamedLUIFunctions.emplace("DDDBGJJEDE", "RemoveStreamedImages");

	// MatchRules_methods
	s_NamedLUIFunctions.emplace("BABCCCHFBJ", "SaveMatchRulesDataDefault");
	s_NamedLUIFunctions.emplace("BCECADEHDA", "LoadMatchRulesDataDefault");
	s_NamedLUIFunctions.emplace("DHIADABBII", "MatchRules_HasMLGRecipeAvailable");
	s_NamedLUIFunctions.emplace("BIHEJBBCDH", "MatchRules_LoadMLGRecipe");
	s_NamedLUIFunctions.emplace("DJEIAJCAD", "MatchRules_ArbitrarilyLoadCDLRecipe");
	s_NamedLUIFunctions.emplace("EAIEFBHGJ", "IsUsingMatchRulesData");
	s_NamedLUIFunctions.emplace("DGFBAJFJBE", "AreMatchRulesDefaultFromFF");
	s_NamedLUIFunctions.emplace("CJGCIGEBB", "SetUsingMatchRulesData");
	s_NamedLUIFunctions.emplace("DDDFIIIDJH", "CustomClassIsRestricted");
	s_NamedLUIFunctions.emplace("EBCADBGDHB", "AttachmentIsRestricted");
	s_NamedLUIFunctions.emplace("DBIIABAEFF", "AttachmentClassIsRestricted");
	s_NamedLUIFunctions.emplace("BAJDCAAGCG", "EquipmentIsRestricted");
	s_NamedLUIFunctions.emplace("DAAABIJDJI", "KillstreakIsRestricted");
	s_NamedLUIFunctions.emplace("CJBJJHJCI", "PerkIsRestricted");
	s_NamedLUIFunctions.emplace("DFIIFBCIH", "SuperIsRestricted");
	s_NamedLUIFunctions.emplace("CADFFHGJAE", "WeaponIsRestricted");
	s_NamedLUIFunctions.emplace("DEJJEDIGDE", "WeaponClassIsRestricted");
	s_NamedLUIFunctions.emplace("DFFFDACHD", "SetAttachmentRestricted");
	s_NamedLUIFunctions.emplace("GABIIHIEF", "SetAttachmentClassRestricted");
	s_NamedLUIFunctions.emplace("EABBAGAHCE", "SetEquipmentRestricted");
	s_NamedLUIFunctions.emplace("CADCJCJEE", "SetKillstreakRestricted");
	s_NamedLUIFunctions.emplace("FHGJJIEHA", "SetPerkRestricted");
	s_NamedLUIFunctions.emplace("BGDGIHFHEF", "SetSuperRestricted");
	s_NamedLUIFunctions.emplace("DJGEFDIGIC", "SetWeaponRestricted");
	s_NamedLUIFunctions.emplace("CBBIHFIDFC", "SetWeaponClassRestricted");
	s_NamedLUIFunctions.emplace("BFBFBEHJ", "InputSwapEnabled");
	s_NamedLUIFunctions.emplace("BEGHEGJCJH", "CheckMatchRulesData");
	s_NamedLUIFunctions.emplace("BIJEDCBCBH", "GetMatchRulesData");
	s_NamedLUIFunctions.emplace("DBAJHJAHCA", "GetMatchRulesDefaultData");
	s_NamedLUIFunctions.emplace("HIEBFADEC", "GetMatchRulesMetaData");
	s_NamedLUIFunctions.emplace("EIBEJCIJ", "ClearMetaDataCache");
	s_NamedLUIFunctions.emplace("CIGFFEAEFD", "SetMatchRulesData");
	s_NamedLUIFunctions.emplace("DEAJJIDDHJ", "CacheDataFromSlot");
	s_NamedLUIFunctions.emplace("CBHIFDJIJC", "SetDataToCachedSlot");
	s_NamedLUIFunctions.emplace("BHEDIECCBD", "SaveCachedDataToSlot");
	s_NamedLUIFunctions.emplace("CGIDDGHJDC", "IsUsingCustomMapRotation");
	s_NamedLUIFunctions.emplace("CHHAJDBFDA", "SetUsingCustomMapRotation");
	s_NamedLUIFunctions.emplace("CHJCIBBIEF", "LoadMatchRulesDataFromHistory");
	s_NamedLUIFunctions.emplace("DGJAEHAEIJ", "SaveMatchRulesDataToHistory");
	s_NamedLUIFunctions.emplace("DBDCFEHABG", "LoadMatchRulesDataFromPlayer");
	s_NamedLUIFunctions.emplace("JJFCFBDAA", "SaveMatchRulesDataToPlayer");
	s_NamedLUIFunctions.emplace("DBIHEGAAEG", "DeleteSaveSlotFromPlayer");
	s_NamedLUIFunctions.emplace("EABFIDADDB", "GetSavedModeMax");

	// DCache_methods
	s_NamedLUIFunctions.emplace("CAJICHGHDG", "ClearDCache");
	s_NamedLUIFunctions.emplace("BJEGJFBIBI", "ClearStartupCount");
	s_NamedLUIFunctions.emplace("DFCGEDHBEC", "IsStartupDisabled");
	s_NamedLUIFunctions.emplace("DFJGJCJJID", "AdditionalData_GetLanguage");
	s_NamedLUIFunctions.emplace("EAEHIJBBCD", "AdditionalData_SetLanguage");

	// Debug_methods
	s_NamedLUIFunctions.emplace("CGCBEDDFEC", "HasDebugTextPermission");
	s_NamedLUIFunctions.emplace("CHFBFDCHBA", "ShouldShowDebugInfo");
	s_NamedLUIFunctions.emplace("BGCHIICIHA", "FetchDebugInfo");

	// LoadoutDrafting_methods
	s_NamedLUIFunctions.emplace("EABHFICBCE", "SetEnabled");
	s_NamedLUIFunctions.emplace("BADICCBICG", "IsEnabled");
	s_NamedLUIFunctions.emplace("ECAFBDGCGI", "RequestRig");
	s_NamedLUIFunctions.emplace("GCDEFJFHF", "RequestSuper");
	s_NamedLUIFunctions.emplace("BHFBBEBFBE", "RequestTrait");
	s_NamedLUIFunctions.emplace("BCAGJEDAEG", "RequestWeapon");
	s_NamedLUIFunctions.emplace("BDDFBGGBDC", "GetRigDraftInfoForPlayer");
	s_NamedLUIFunctions.emplace("DEABDIJFCA", "GetWeaponDraftInfoForPlayer");
	s_NamedLUIFunctions.emplace("CDDHABCDHI", "GetPlayerXUIDWithRig");
	s_NamedLUIFunctions.emplace("EBHGFCEEDG", "GetPlayerXUIDWithWeapon");
	s_NamedLUIFunctions.emplace("DGCCJECGEJ", "StartDraftingTimer");
	s_NamedLUIFunctions.emplace("CGCGHIJDFF", "GetDraftingTimeRemaining");
	s_NamedLUIFunctions.emplace("FBACBFFHI", "ResetAllPartyMemberDraftData");

	// Engine_methods_0
	s_NamedLUIFunctions.emplace("CFDEEHJBFJ", "BitwiseAnd");
	s_NamedLUIFunctions.emplace("CAGFFJDHFJ", "BitwiseOr");
	s_NamedLUIFunctions.emplace("DHIDDHFHBB", "HorizontalFovTrueValue");
	s_NamedLUIFunctions.emplace("HCHEJADDD", "VerticalFovTrueValue");
	s_NamedLUIFunctions.emplace("CHJJIAHHGE", "IsBitSet");
	s_NamedLUIFunctions.emplace("DEIFCEICHE", "BitShiftRight");
	s_NamedLUIFunctions.emplace("EAGHDEHDGB", "MustShowSplashScreens");
	s_NamedLUIFunctions.emplace("HDHJDCJGH", "SetHasSeenSplashScreen");
	s_NamedLUIFunctions.emplace("DHGBFGBAIG", "DoesSoundExist");
	s_NamedLUIFunctions.emplace("BJDBIAGIDA", "PlaySound");
	s_NamedLUIFunctions.emplace("CHFEJIG", "IsSoundPlaying");
	s_NamedLUIFunctions.emplace("EAGBECEBGA", "StopSound");
	s_NamedLUIFunctions.emplace("CDFIDGJGHE", "FadeSound");
	s_NamedLUIFunctions.emplace("EABDEEEEDB", "GetSubtitleForSound");
	s_NamedLUIFunctions.emplace("GDEGAIEID", "PlayCountdownSound");
	s_NamedLUIFunctions.emplace("BBEEIGHJBA", "PlayMusic");
	s_NamedLUIFunctions.emplace("BEFHEEBHIA", "StopMusic");
	s_NamedLUIFunctions.emplace("CGDBJBGBHI", "FadeMusic");
	s_NamedLUIFunctions.emplace("DGCGDAJCCI", "GetBuildNumber");
	s_NamedLUIFunctions.emplace("DAGJJAIBJD", "GetLuiInUse");
	s_NamedLUIFunctions.emplace("DHFEGHHHFH", "SetLuiInUse");
	s_NamedLUIFunctions.emplace("BGBCGJGJFJ", "SetInventoryInUse");
	s_NamedLUIFunctions.emplace("EAGEGCJIEA", "SetScoreboardOn");
	s_NamedLUIFunctions.emplace("DBFFAEEFGJ", "GetLuiRoot");
	s_NamedLUIFunctions.emplace("CEGEEHGGBA", "GetAspectRatio");
	s_NamedLUIFunctions.emplace("BECFECEHDB", "GetInvertPitchKBM");
	s_NamedLUIFunctions.emplace("CBFABAEHIH", "IndexForNetConstString");
	s_NamedLUIFunctions.emplace("CIJBCECDAG", "NetConstStringFromIndex");
	s_NamedLUIFunctions.emplace("EBHIFJCGBH", "NotifyServer");
	s_NamedLUIFunctions.emplace("JCBDICCAH", "MarkLocalized");
	s_NamedLUIFunctions.emplace("CBBHFCGDIC", "Localize");
	s_NamedLUIFunctions.emplace("DDFHCEDJEA", "LocalizeLong");
	s_NamedLUIFunctions.emplace("EACCHAIHIB", "IsControllerMissing");
	s_NamedLUIFunctions.emplace("CECBAFFJIB", "ShowControllerConnectedPopup");
	s_NamedLUIFunctions.emplace("FCBFFFCGA", "DisableControllerConnectedPopup");
	s_NamedLUIFunctions.emplace("BGBBEIFEDB", "IsOnlineConnectivityDisabled");
	s_NamedLUIFunctions.emplace("BACCCIHGDG", "IsNetworkConnected");
	s_NamedLUIFunctions.emplace("HABIAFADE", "ShouldBeInOnlineArea");
	s_NamedLUIFunctions.emplace("IEJEJEI", "IsSystemUiActive");
	s_NamedLUIFunctions.emplace("DHDFAFJJBD", "GetMouseButtons");
	s_NamedLUIFunctions.emplace("DAIACGBAGD", "GetActiveStatsSource");
	s_NamedLUIFunctions.emplace("BHBHCBJACC", "IsWaitingForTransientFiles");
	s_NamedLUIFunctions.emplace("BCDJIEIDID", "IsAnyUserSignedIn");
	s_NamedLUIFunctions.emplace("BIIBDBAHD", "AreRegulationsEnabled");
	s_NamedLUIFunctions.emplace("CDCCDDJAJJ", "IsUserSignedIn");
	s_NamedLUIFunctions.emplace("BICHEEFHEC", "IsUserSignedInToLive");
	s_NamedLUIFunctions.emplace("CJJAFGIFAC", "IsUserSignedInToDemonware");
	s_NamedLUIFunctions.emplace("DBEJJAFIAI", "DoWeHaveOnlineStats");
	s_NamedLUIFunctions.emplace("BAHCIEEBFD", "DoWeHaveStatsForActiveSource");
	s_NamedLUIFunctions.emplace("ECJDCGHJH", "IsUserSignedInForCommerce");
	s_NamedLUIFunctions.emplace("DBAEJAHFGJ", "IsUserAGuest");
	s_NamedLUIFunctions.emplace("CCGJCIECBJ", "IsProfileSignedIn");
	s_NamedLUIFunctions.emplace("CBBGBGBFJF", "UserCanPlayOnline");
	s_NamedLUIFunctions.emplace("CGJEJFBEAG", "HasOnlineServiceSubscription");
	s_NamedLUIFunctions.emplace("BHCCFDDEHE", "DoWeHaveOnlineSubscriptionInformation");
	s_NamedLUIFunctions.emplace("CIFGGDIGBE", "UserIsGuest");
	s_NamedLUIFunctions.emplace("GHHAJBJAE", "UserIsAgeRestricted");
	s_NamedLUIFunctions.emplace("BGIDADECDJ", "CancelConnecting");
	s_NamedLUIFunctions.emplace("DFBEIBEAF", "IsInDemonwareQueue");
	s_NamedLUIFunctions.emplace("BAFIABHBHG", "GetDemonwareQueueWaitTimeSecs");
	s_NamedLUIFunctions.emplace("BIBHHEJBIB", "IsInSignInQueue");
	s_NamedLUIFunctions.emplace("CJCEEHHIJE", "GetSignInQueueWaitTimeSecs");
	s_NamedLUIFunctions.emplace("BFBHHIHIJD", "GetSignInQueuePosition");
	s_NamedLUIFunctions.emplace("BBBFBHBDFF", "AllSplitscreenProfilesSignedIn");
	s_NamedLUIFunctions.emplace("DADCAIEEDE", "UserWithoutOfflineProfile");
	s_NamedLUIFunctions.emplace("BHFJEBACDF", "GetDefaultSensitivityIndex");
	s_NamedLUIFunctions.emplace("DIDFDDCCDE", "GetHorizontalSensitivityIndex");
	s_NamedLUIFunctions.emplace("CBGBBHHIJE", "SetHorizontalSensitivity");
	s_NamedLUIFunctions.emplace("IFJCDCCAI", "GetVerticalSensitivityIndex");
	s_NamedLUIFunctions.emplace("HGJFFDFCE", "SetVerticalSensitivity");
	s_NamedLUIFunctions.emplace("CHIGGDJFGJ", "GetHitMarkerSoundAlias");
	s_NamedLUIFunctions.emplace("CFBBHFFBH", "SetHitMarkerSoundAlias");
	s_NamedLUIFunctions.emplace("BECCFCBIAA", "GetProfileData");
	s_NamedLUIFunctions.emplace("DFJDIFJEGA", "SetProfileData");
	s_NamedLUIFunctions.emplace("CJHGJHCGCD", "ResetProfileData");
	s_NamedLUIFunctions.emplace("BHDGCFCBDJ", "ResetAllGameOptions");
	s_NamedLUIFunctions.emplace("IEBBJFBE", "GetProfileDataDefaultValue");
	s_NamedLUIFunctions.emplace("GBEDAEBIH", "GetProfileDataMinValue");
	s_NamedLUIFunctions.emplace("ECCHEFFDFD", "GetProfileDataMaxValue");
	s_NamedLUIFunctions.emplace("CBGJIDFIDE", "NeedToDeleteSaveData");
	s_NamedLUIFunctions.emplace("EBHEBCCBFD", "DeleteProfile");
	s_NamedLUIFunctions.emplace("CCBBGABHEH", "WriteProfile");
	s_NamedLUIFunctions.emplace("BFFHIDFJFG", "RetrySaveData");
	s_NamedLUIFunctions.emplace("BBHEIABDAC", "ProfileMenuDvarsSetup");
	s_NamedLUIFunctions.emplace("BEBBDFEICI", "SetSticksConfig");
	s_NamedLUIFunctions.emplace("CBCIHEGADA", "SetButtonsConfig");
	s_NamedLUIFunctions.emplace("DFBAEGIJIE", "ClearSaveDataErrors");
	s_NamedLUIFunctions.emplace("DIAIDJECHF", "CanViewClanTags");
	s_NamedLUIFunctions.emplace("EBBGDFJAAF", "IsUGCRestricted");
	s_NamedLUIFunctions.emplace("DAGCEEFBBI", "CanViewCustomEmblemFromUser");
	s_NamedLUIFunctions.emplace("ECHGADJJIE", "CanAccessCustomEmblemFeature");
	s_NamedLUIFunctions.emplace("CDFCHEJJE", "IsChatRestricted");
	s_NamedLUIFunctions.emplace("DDAFEGDJHC", "GetCustomClanTag");
	s_NamedLUIFunctions.emplace("BBFCBBIECH", "GetClanTag");
	s_NamedLUIFunctions.emplace("HJGGJEDCD", "GetRawClanTag");
	s_NamedLUIFunctions.emplace("IIEFBGGGA", "SetAndEnableCustomClanTag");
	s_NamedLUIFunctions.emplace("BJEHICBBEC", "SetAndEnableOfficialClanTag");
	s_NamedLUIFunctions.emplace("GGIHFEAGD", "SetClanTagType");
	s_NamedLUIFunctions.emplace("HEIIHIEH", "ValidateClanDigitsRestriction");
	s_NamedLUIFunctions.emplace("JICJIBH", "SetWeaponInPlayercardCache");
	s_NamedLUIFunctions.emplace("BCABFACBIC", "SyncPartyPlayercards");
	s_NamedLUIFunctions.emplace("BJBCAJFECC", "ShowGamerCard_0");
	s_NamedLUIFunctions.emplace("JCFIBGGJB", "HasClientMatchData");
	s_NamedLUIFunctions.emplace("EAIADADAIH", "GetClientMatchData");
	s_NamedLUIFunctions.emplace("BAFCBFEHG", "HasSaveDevice");
	s_NamedLUIFunctions.emplace("EBEAGCDEJ", "GetExtinctionBonusDeadline");
	s_NamedLUIFunctions.emplace("BAIICCCCAG", "UpdateExtinctionBonusDeadline");
	s_NamedLUIFunctions.emplace("DCCBEAGDJE", "ToggleInvertedPitch");
	s_NamedLUIFunctions.emplace("BIJGBJEBIH", "ToggleInvertedFlyPitch");
	s_NamedLUIFunctions.emplace("DEEDAHEFAJ", "SetAimAssistType");
	s_NamedLUIFunctions.emplace("BJGFGHGFEG", "SetAimResponseCurveType");
	s_NamedLUIFunctions.emplace("CIAGIFEAIC", "SetMountButtonConfig");
	s_NamedLUIFunctions.emplace("IEGJEIHE", "SetMountButtonConfigKBM");
	s_NamedLUIFunctions.emplace("CGBEIIAHEH", "ToggleSprintCancelsReload");
	s_NamedLUIFunctions.emplace("BEGIJHBHFC", "IsPitchInverted");
	s_NamedLUIFunctions.emplace("DFGAIDGFJC", "ToggleRumble");
	s_NamedLUIFunctions.emplace("BIGJIJCGCE", "ToggleLightBar");
	s_NamedLUIFunctions.emplace("BDFFDJAHBF", "ToggleLean");
	s_NamedLUIFunctions.emplace("DADEIIEEEB", "SetYoloState");
	s_NamedLUIFunctions.emplace("BGDAJBJBFF", "SetSubtitlesEnabled");
	s_NamedLUIFunctions.emplace("JJGBIGCCJ", "SubtitlesEnabled");
	s_NamedLUIFunctions.emplace("BBBCGJDGBH", "ToggleAutoAim");
	s_NamedLUIFunctions.emplace("CABGDFCIDH", "ToggleTargetAssist");
	s_NamedLUIFunctions.emplace("CBCJIDDIED", "GetColorBlindTargets");
	s_NamedLUIFunctions.emplace("DCFJBGICFF", "SetColorBlindTargets");
	s_NamedLUIFunctions.emplace("BFIFFDCGAB", "SetMinimapStyle");
	s_NamedLUIFunctions.emplace("CECAAEJABF", "SetMinimapRotationEnabled");
	s_NamedLUIFunctions.emplace("DFDGCIDHJH", "SetUseNumbersForCompassCardinalDirText");
	s_NamedLUIFunctions.emplace("DDIFAGHHAB", "GetMinimapStyle");
	s_NamedLUIFunctions.emplace("BIEGEGDIGH", "GetMinimapRotationEnabled");
	s_NamedLUIFunctions.emplace("BFDEDEGDFD", "GetUseNumbersForCompassCardinalDirText");
	s_NamedLUIFunctions.emplace("CIDEADAABH", "GetIsGoreAllowedInRegion");
	s_NamedLUIFunctions.emplace("BGGADJCCDE", "ToggleMPVoice");
	s_NamedLUIFunctions.emplace("HDABBHBEH", "GetTimePlayed");
	s_NamedLUIFunctions.emplace("JDFDCGCIJ", "IsKeyboardConnected");
	s_NamedLUIFunctions.emplace("EABCCIBFIG", "UsesMouseCursor");
	s_NamedLUIFunctions.emplace("DJHEEAFGDJ", "GetMousePosition");
	s_NamedLUIFunctions.emplace("EBIDFIDHIE", "Exec");
	s_NamedLUIFunctions.emplace("BHHDJIGHED", "ExecFirstClient");
	s_NamedLUIFunctions.emplace("DAGFFDGFII", "ExecNow");
	s_NamedLUIFunctions.emplace("CCFIBGGCBE", "ExecKeysCfgFrom");
	s_NamedLUIFunctions.emplace("BGHCDBAGFB", "ReloadDefaultKeysCfg");
	s_NamedLUIFunctions.emplace("CDIHEFEJB", "StartGameModeSP");
	s_NamedLUIFunctions.emplace("DIDCHDDFBH", "StartGameModeMP");
	s_NamedLUIFunctions.emplace("JIGEGGGJB", "StartGameModeCP");
	s_NamedLUIFunctions.emplace("BIGIHAGAAA", "StopGameMode");
	s_NamedLUIFunctions.emplace("FJDFFHJA", "SetDesiredGamemode");
	s_NamedLUIFunctions.emplace("DAGIJBGAAE", "PlayStreamingVideo");
	s_NamedLUIFunctions.emplace("ECIEABHFIC", "StopStreamingVideo");
	s_NamedLUIFunctions.emplace("CAIHJDHFJE", "PauseStreamingVideo");
	s_NamedLUIFunctions.emplace("CCHGHHHHFH", "MuteStreamingVideo");
	s_NamedLUIFunctions.emplace("BIDIIHCBJE", "DisplayStreamingVideo");
	s_NamedLUIFunctions.emplace("DFCGFCGBFD", "PlayMenuVideo");
	s_NamedLUIFunctions.emplace("EBCGADABJ", "StopMenuVideo");
	s_NamedLUIFunctions.emplace("CIBAFDBCBB", "PlaySavedVideo");
	s_NamedLUIFunctions.emplace("CDDDJGHIAE", "GetMenuVideoName");
	s_NamedLUIFunctions.emplace("BCJJBCDGAC", "IsVideoFinished");
	s_NamedLUIFunctions.emplace("DBBDFHBBJC", "IsPlayingStoryBink");
	s_NamedLUIFunctions.emplace("EAEJHHHFIC", "IsCurrentBinkLoadFiller");
	s_NamedLUIFunctions.emplace("BIBCHJFBBI", "GetCurrentBink");
	s_NamedLUIFunctions.emplace("BJCFEDEDHA", "IsDoingSPHotLoad");
	s_NamedLUIFunctions.emplace("DJCDIBBDGH", "IsInSPHotLoadBinkTransition");
	s_NamedLUIFunctions.emplace("IGAJBFHE", "IsVideoPlaying");
	s_NamedLUIFunctions.emplace("BEHFHDEBDG", "PauseVideo");
	s_NamedLUIFunctions.emplace("CCCCGJJHFB", "ResumeVideo");
	s_NamedLUIFunctions.emplace("DAFJHJCCGG", "GetBinkFrameNum");
	s_NamedLUIFunctions.emplace("CGDDJJFGII", "GetBinkFrameRate");
	s_NamedLUIFunctions.emplace("BAGCIGCDIJ", "GetBinkTotalFrames");
	s_NamedLUIFunctions.emplace("EAFIEFBJFG", "PlayBinkFillerAfterFinish");
	s_NamedLUIFunctions.emplace("CHJEEHIFIC", "InLoadingScreen");
	s_NamedLUIFunctions.emplace("IBCDJDCJC", "ClearError");
	s_NamedLUIFunctions.emplace("CGJADJICAF", "ClearMapLoadErrors");
	s_NamedLUIFunctions.emplace("BJHACEBBHG", "GetMapLoadErrorText");
	s_NamedLUIFunctions.emplace("JJCEDCHDD", "GetMapLoadErrorTitle");
	s_NamedLUIFunctions.emplace("CHBCJJFDI", "GetMapLoadErrorCount");
	s_NamedLUIFunctions.emplace("DDEFCIDEJG", "ReportMemory");
	s_NamedLUIFunctions.emplace("DGEFGAJIB", "GetCurrentCoDPlayMode");
	s_NamedLUIFunctions.emplace("BAGCCCCIEF", "GetLUIModeTransition");
	s_NamedLUIFunctions.emplace("CEEFDAGBGH", "GetUnitScale");
	s_NamedLUIFunctions.emplace("CBBFJHCJFB", "IsPS3");
	s_NamedLUIFunctions.emplace("CIEGIACHAE", "IsPS4");
	s_NamedLUIFunctions.emplace("BIAEDEEBJI", "IsGamepadVita");
	s_NamedLUIFunctions.emplace("BAJJIAFDH", "IsXbox360");
	s_NamedLUIFunctions.emplace("BAHIIBFDDG", "IsXB3");
	s_NamedLUIFunctions.emplace("CGABICJHAI", "IsPC");
	s_NamedLUIFunctions.emplace("BEFACAIFDD", "IsPCApp");
	s_NamedLUIFunctions.emplace("DBFCJBDJEC", "IsBattleNet");
	s_NamedLUIFunctions.emplace("ECAJCAJJGF", "IsWeGame");
	s_NamedLUIFunctions.emplace("CBFHIIHAGH", "IsSteamGame");
	s_NamedLUIFunctions.emplace("BCIEFJCBIE", "IsPCDesktop");
	s_NamedLUIFunctions.emplace("EAAHJIGHHI", "IsPCSimple");
	s_NamedLUIFunctions.emplace("BJGAADIDFH", "IsBattleNetLanOnly");
	s_NamedLUIFunctions.emplace("HEEFCICJE", "IsMagma");
	s_NamedLUIFunctions.emplace("CFHBIHABCB", "IsPremiumPlayer");
	s_NamedLUIFunctions.emplace("ECFHDAEIDA", "IsPremiumPlayerReady");
	s_NamedLUIFunctions.emplace("DJADIGFBGI", "RefreshPremiumPlayer");
	s_NamedLUIFunctions.emplace("CGFGDJCJHI", "IsLanguageAvailable");
	s_NamedLUIFunctions.emplace("CCGEHCIECB", "LanguageHasPartialVariant");
	s_NamedLUIFunctions.emplace("EEHHCFBGC", "UsePartialVariant");
	s_NamedLUIFunctions.emplace("CDFHJHDEFC", "SetUsePartialVariant");
	s_NamedLUIFunctions.emplace("BBGGBGEHAI", "CanResumeGame");
	s_NamedLUIFunctions.emplace("IJEBHJIJF", "GetFirstActiveController");
	s_NamedLUIFunctions.emplace("CHACGEJGIH", "IsAnyLocalClientActive");
	s_NamedLUIFunctions.emplace("CIHFHAIIHC", "MakeLocalClientInactive");
	s_NamedLUIFunctions.emplace("DCHCGDJCGB", "GetLocalClientXUID");
	s_NamedLUIFunctions.emplace("EAGGAEGHHA", "GetLocalClientXUIDString");
	s_NamedLUIFunctions.emplace("BBHAECABBD", "HasActiveLocalClient");
	s_NamedLUIFunctions.emplace("BFDACIJIAD", "IsActiveLocalClientPrimary");
	s_NamedLUIFunctions.emplace("DCJGJDDEHE", "GetMaxControllerCount");
	s_NamedLUIFunctions.emplace("DAFGFCFHJI", "InLobby");
	s_NamedLUIFunctions.emplace("DHFGJHAADD", "AntiCheatBanCheck");
	s_NamedLUIFunctions.emplace("DCGHGJCHIB", "IsProfanity");
	s_NamedLUIFunctions.emplace("DJEDDFJEIG", "Quit");
	s_NamedLUIFunctions.emplace("BAAGFJBAAE", "GetDisplayHeight");
	s_NamedLUIFunctions.emplace("CGDHIAECED", "GetDisplayWidth");
	s_NamedLUIFunctions.emplace("DIJFAAHDIH", "GetStatsGroupForGameMode");
	s_NamedLUIFunctions.emplace("DFEIGFBEH", "GetMaterialAspectRatio");
	s_NamedLUIFunctions.emplace("EAHBBDJHID", "BindKey");
	s_NamedLUIFunctions.emplace("DABIGBHJDG", "UnbindKey");
	s_NamedLUIFunctions.emplace("CGGHDFIDAF", "ResetKey");
	s_NamedLUIFunctions.emplace("BFHCBIBDGH", "ResetAllBindings");
	s_NamedLUIFunctions.emplace("BJDGHFDHC", "LinkKey");
	s_NamedLUIFunctions.emplace("EBHBCGHBJ", "UnlinkKey");
	s_NamedLUIFunctions.emplace("CIBAHEBCFJ", "IsKeyLinked");
	s_NamedLUIFunctions.emplace("BABHEFFEGI", "GetBinding");
	s_NamedLUIFunctions.emplace("DCCFJEGGGE", "GetBoundKey");
	s_NamedLUIFunctions.emplace("DEGABDJDH", "GetDefaultKey");
	s_NamedLUIFunctions.emplace("EJJEHHFCC", "SetRecommended");
	s_NamedLUIFunctions.emplace("CAAAFJIFDG", "BBPrint");
	s_NamedLUIFunctions.emplace("CEJJDJJHIJ", "DLog_LuaRecordEvent");
	s_NamedLUIFunctions.emplace("CEIHBEDEDE", "DLog_RecordBindingsAndGameplayOptions");
	s_NamedLUIFunctions.emplace("CDEBADHJJF", "DLog_NotifyMainMenuStart");
	s_NamedLUIFunctions.emplace("DDCJCCJCBA", "ReportPublicLobbyMenuOpenedWithoutBeingInLobbyPartyError");
	s_NamedLUIFunctions.emplace("CFCAICIAJC", "GetBytesFree");
	s_NamedLUIFunctions.emplace("EAIJDCADAJ", "GetHighestDifficultyForLevel");
	s_NamedLUIFunctions.emplace("CHJHJIEBAE", "HasCompletedAnyLevel");
	s_NamedLUIFunctions.emplace("EEFJJJEHF", "SupportsDefaultMenu");
	s_NamedLUIFunctions.emplace("CHJADGICGJ", "ReportMemoryUsage");
	s_NamedLUIFunctions.emplace("GHHBHBFAC", "GetMaxMPClients");
	s_NamedLUIFunctions.emplace("CIHDHDCIBE", "GetLastErrorCode");
	s_NamedLUIFunctions.emplace("DHCGHHBHCH", "ClearLastErrorCode");
	s_NamedLUIFunctions.emplace("BHBDBCEHC", "SetupClientViewports");
	s_NamedLUIFunctions.emplace("BBDCAFEGDJ", "DeprecatedIsGamepadEnabled");
	s_NamedLUIFunctions.emplace("BGGJFFFAFG", "IsGamepadEnabledForController");
	s_NamedLUIFunctions.emplace("CIGGHDDHGJ", "SetGamepadEnabled");
	s_NamedLUIFunctions.emplace("DHCFHGIABE", "GetUsernameByController");
	s_NamedLUIFunctions.emplace("HDDHJIBDH", "HasAcceptedInvite");
	s_NamedLUIFunctions.emplace("BJBBFIGDGI", "DeclineInvitationOnGamerProfileFenceBackout");
	s_NamedLUIFunctions.emplace("CBEFBFCHHA", "GetPlayerIntelIsFound");
	s_NamedLUIFunctions.emplace("BHHJBIJAAD", "CurrentMapHasSave");
	s_NamedLUIFunctions.emplace("CFIECCHFCA", "SPPause");
	s_NamedLUIFunctions.emplace("DGBECFGFCH", "Pause");
	s_NamedLUIFunctions.emplace("DIDFHBFDFG", "Unpause");
	s_NamedLUIFunctions.emplace("BHEJICHIDE", "UnpauseUISounds");
	s_NamedLUIFunctions.emplace("CGCJAJBEGD", "StartTransitionSettleFrames");
	s_NamedLUIFunctions.emplace("BJFGCHEIEG", "IsRunningTransitionSettleFrames");
	s_NamedLUIFunctions.emplace("BBAEDJDDBA", "DuckAudio");
	s_NamedLUIFunctions.emplace("DAJJCCHDFI", "SetSoundSubmix");
	s_NamedLUIFunctions.emplace("JHFJAJIDC", "StopAllSounds");
	s_NamedLUIFunctions.emplace("DCIAEHEJGH", "StripTextLocs");
	s_NamedLUIFunctions.emplace("BFBIDEGDFB", "GetMilliseconds");
	s_NamedLUIFunctions.emplace("DGIDFICCJE", "GetMicroseconds");
	s_NamedLUIFunctions.emplace("CDHECDHEDF", "GetCurrentDayMonthYear");
	s_NamedLUIFunctions.emplace("CCEJJCCDEG", "GetCurrentTimeDiffWithEpochTime");
	s_NamedLUIFunctions.emplace("DFDDHFFJF", "IsCurrentTimeWithinRange");
	s_NamedLUIFunctions.emplace("BAHGDJFBEF", "AddToEpochTime");
	s_NamedLUIFunctions.emplace("DCJHCAFIIA", "GetCurrentEpochTime");
	s_NamedLUIFunctions.emplace("CHHGDHCDB", "GetCurrentYear");
	s_NamedLUIFunctions.emplace("BADEEDFGHB", "GetFormattedDate");
	s_NamedLUIFunctions.emplace("CIIGICAIFC", "GetFormattedTime");
	s_NamedLUIFunctions.emplace("CBBHGHDEEA", "GetFormattedDateTime");
	s_NamedLUIFunctions.emplace("CDHIBDHIGD", "GetFormattedDateTimeForEvent");
	s_NamedLUIFunctions.emplace("BEDAHJJBFJ", "GetCurrentFormattedDateTime");
	s_NamedLUIFunctions.emplace("GEGAFIFFC", "FormatTimeHoursMinutesSeconds");
	s_NamedLUIFunctions.emplace("BJCFFHAIFA", "FormatTimeSmall");
	s_NamedLUIFunctions.emplace("DDHICDBBDI", "GetRawMonthDayYear");
	s_NamedLUIFunctions.emplace("BFBIAHJJFA", "FormatDuration");
	s_NamedLUIFunctions.emplace("CHDGGCCHC", "GetMonthName");
	s_NamedLUIFunctions.emplace("BBBFCJBBJD", "GetMonthNameAbbreviated");
	s_NamedLUIFunctions.emplace("EBCIHGAFBB", "GetDayOfWeekName");
	s_NamedLUIFunctions.emplace("CHCIHAAECA", "GetDayOfWeekNameAbbreviated");
	s_NamedLUIFunctions.emplace("DECICJIHF", "GetAccessoryIndex");
	s_NamedLUIFunctions.emplace("BBFJAICIBC", "GetAccessoryWidgetName");
	s_NamedLUIFunctions.emplace("ECDIACHEID", "GetAccessoryRTTWidth");
	s_NamedLUIFunctions.emplace("DCCFDBGGEE", "GetAccessoryRTTHeight");
	s_NamedLUIFunctions.emplace("CBGDIBDFHI", "GetAccessoryRTTMipCount");
	s_NamedLUIFunctions.emplace("BFIHBCBIHJ", "UsingSplitscreenUpscaling");
	s_NamedLUIFunctions.emplace("JEDFGECDJ", "SplitscreenPlayerCount");
	s_NamedLUIFunctions.emplace("DFBCEFIHEJ", "PreCacheGlyphs");
	s_NamedLUIFunctions.emplace("BIIFFHIFCJ", "ResetFontsPrecache");
	s_NamedLUIFunctions.emplace("BJCCIACEHG", "StreamingCheckInstall");
	s_NamedLUIFunctions.emplace("CFGCDIGFIE", "StreamingSuspendInstall");
	s_NamedLUIFunctions.emplace("CHCAFBBGGD", "IsFastFileGameWorkComplete");
	s_NamedLUIFunctions.emplace("CEAEFCAGJG", "GetCurrentRegion");
	s_NamedLUIFunctions.emplace("DGAIDIEIAC", "GetCurrentLanguage");
	s_NamedLUIFunctions.emplace("BGGFCBBEC", "GetPreferredLanguage");
	s_NamedLUIFunctions.emplace("CEHDAACIJA", "SetPreferredLanguage");
	s_NamedLUIFunctions.emplace("BJCBCCBJIE", "IsSpecialRegion");
	s_NamedLUIFunctions.emplace("CFHFFAIEAF", "ClearMatchData");
	s_NamedLUIFunctions.emplace("DGFBJCEDCG", "IgnoreXB3UserProfileChange");
	s_NamedLUIFunctions.emplace("BJGGCHBAGJ", "PLMRefreshData");
	s_NamedLUIFunctions.emplace("DCICIJEHHH", "NVidiaGPUAvailable");
	s_NamedLUIFunctions.emplace("DCCEGJFHJE", "TXAAAvailable");
	s_NamedLUIFunctions.emplace("CGDBBICBA", "SMAAT2XAvailable");
	s_NamedLUIFunctions.emplace("BIDCHDJIC", "HBAOAvailable");
	s_NamedLUIFunctions.emplace("DJDAJEJDE", "IsDisplayOutputHDR");
	s_NamedLUIFunctions.emplace("BAIEJBHIB", "IsDisplayHDRCapable");
	s_NamedLUIFunctions.emplace("EBFEGIICEF", "HDRLuminanceFromSDK");
	s_NamedLUIFunctions.emplace("FFFHHEJDI", "GetSDRBarelyVisibleIntensity");
	s_NamedLUIFunctions.emplace("CIHICDGIBJ", "IsSaveGameScreenShotAvailable");
	s_NamedLUIFunctions.emplace("DCBHGJHBDC", "GetTimeOfLastSaveGame");
	s_NamedLUIFunctions.emplace("EBGJFFIAGG", "WeaponUsesEnergyBullets");
	s_NamedLUIFunctions.emplace("EAHDDEACBE", "WeaponTypeIsProjectile");
	s_NamedLUIFunctions.emplace("DDHHJJHBGC", "GetWeaponSetupInitialized");
	s_NamedLUIFunctions.emplace("CAGHCEACAD", "IsDraftTeamCompositionValid");
	s_NamedLUIFunctions.emplace("CJFHCGJGDI", "GetLoadoutDraftTeams");
	s_NamedLUIFunctions.emplace("CIGDHFFFEJ", "GetTeamForLocalClient");
	s_NamedLUIFunctions.emplace("BDDFJHDIBH", "GetTeamForPartyMemberIndex");
	s_NamedLUIFunctions.emplace("BAGAFBABEE", "GetLocalClientFullGamertag");
	s_NamedLUIFunctions.emplace("DDHAAEGIEI", "IsDisplayingNameTag");
	s_NamedLUIFunctions.emplace("DHJAFBBDIC", "GetNumActiveLocalClients");
	s_NamedLUIFunctions.emplace("BJEDCJAEHH", "GetVoiceLevel");
	s_NamedLUIFunctions.emplace("FHEGBGHEC", "PartyMemberHasMapPack");
	s_NamedLUIFunctions.emplace("CAHFBHBEBB", "PartyMissingMapPacks");
	s_NamedLUIFunctions.emplace("CJHFBEFDI", "PartyGetFirstPlayerWithoutMap");
	s_NamedLUIFunctions.emplace("BAJHDFAJJF", "IsMapPackOwned");
	s_NamedLUIFunctions.emplace("DBEEJAFGJC", "PartyEveryoneHasMap");
	s_NamedLUIFunctions.emplace("BFGCGJFFBB", "AnyoneHasSeasonPass");
	s_NamedLUIFunctions.emplace("CAFEGAJHHH", "AnyoneHasSpecificDLCPack");
	s_NamedLUIFunctions.emplace("JJAHDCGHI", "ShowFirstPartyStoreForDLCPack");
	s_NamedLUIFunctions.emplace("EBCBBHIJHJ", "DeleteAndEnqueueOutOfDateContent");
	s_NamedLUIFunctions.emplace("BHBDAJFHGA", "DeleteOutOfDateContent");
	s_NamedLUIFunctions.emplace("BJDBAHBCHD", "UnmountAllContent");
	s_NamedLUIFunctions.emplace("CHGCJCJFHE", "GetDLCPackProgress");
	s_NamedLUIFunctions.emplace("HJCBGFJHE", "AnyoneHasAliensDLC");
	s_NamedLUIFunctions.emplace("CAEIGFHEDF", "AnyoneHasAliensDLC1");
	s_NamedLUIFunctions.emplace("ECACFHAEFG", "AnyoneHasAliensDLC2");
	s_NamedLUIFunctions.emplace("DEIEFJJEEJ", "AnyoneHasAliensDLC3");
	s_NamedLUIFunctions.emplace("EBIJHBBHBA", "AnyoneHasAliensDLC4");
	s_NamedLUIFunctions.emplace("JJEEDEDHE", "SetStoreEnterTimestamp");
	s_NamedLUIFunctions.emplace("BEGFEIBDFF", "GetUpsellMenuViewTime");
	s_NamedLUIFunctions.emplace("EAAAGHFJCB", "SetUpsellMenuOpenTimestamp");
	s_NamedLUIFunctions.emplace("DGJAJJJHGF", "GetUpsellMenuOpenTimestamp");
	s_NamedLUIFunctions.emplace("JDFEBBHGH", "SetUpsellMenuCloseTimestamp");
	s_NamedLUIFunctions.emplace("DBHBIHJDEC", "ShowOnlineUpsell");
	s_NamedLUIFunctions.emplace("EBCDFHECAC", "IsShowingOnlineUpsell");
	s_NamedLUIFunctions.emplace("BGEFGFACEH", "ShowAccountPicker");
	s_NamedLUIFunctions.emplace("JIFHCDAFB", "IsShowingAccountPicker");
	s_NamedLUIFunctions.emplace("CAGFAECIIG", "GetControllerForLocalClient");
	s_NamedLUIFunctions.emplace("DAGGACDJBE", "VoteForDLCItem");
	s_NamedLUIFunctions.emplace("CJEBHGIHFC", "GetNumberOfImagesForVote");
	s_NamedLUIFunctions.emplace("BDEFICGGII", "StartVoteImageDownload");
	s_NamedLUIFunctions.emplace("CFEAGBEAHD", "IsVoteImageDownloaded");
	s_NamedLUIFunctions.emplace("DIJFGHFJEJ", "IsAnnouncerReleased");
	s_NamedLUIFunctions.emplace("CGEIBHCJF", "IsAnnouncerUnlocked");
	s_NamedLUIFunctions.emplace("EAHHIHGEAC", "IsSuitLocked");
	s_NamedLUIFunctions.emplace("CBEAHDFCFC", "ToUpperCase");
	s_NamedLUIFunctions.emplace("CBAAECBJAJ", "TruncateToGlyphCount");
	s_NamedLUIFunctions.emplace("BAJIGJADFI", "UserOwnsApp");
	s_NamedLUIFunctions.emplace("EDHEFGEJA", "AppIsInstalled");
	s_NamedLUIFunctions.emplace("DDCGBHDIBF", "IsLevelInFileSystem");
	s_NamedLUIFunctions.emplace("BCCAEIIBEF", "SetLastLuaError");
	s_NamedLUIFunctions.emplace("DEIDGHDBHD", "GetUTC");
	s_NamedLUIFunctions.emplace("CIIJFDHHC", "GetUTCOffset");
	s_NamedLUIFunctions.emplace("GFCCJDDGH", "GetCurrentMissionGroup");
	s_NamedLUIFunctions.emplace("ECFHCCHDGF", "GetEntityNumNoneValue");
	s_NamedLUIFunctions.emplace("JEJDGCEIJ", "MakeLocalClientActive");
	s_NamedLUIFunctions.emplace("DCAFDBDGGA", "GetMaxShipCallouts");
	s_NamedLUIFunctions.emplace("BGGEEHBDEI", "GetShipCalloutText");
	s_NamedLUIFunctions.emplace("BCIDHGBGDC", "GetSpaceshipTargetTag");
	s_NamedLUIFunctions.emplace("CDDBGABEGI", "GetRankForXP");
	s_NamedLUIFunctions.emplace("BHFDJFGJHD", "IsTURequired");
	s_NamedLUIFunctions.emplace("CEEHHDEHJB", "DeactivateClients");
	s_NamedLUIFunctions.emplace("CDGCBCBAJ", "ActivateInitialClient");
	s_NamedLUIFunctions.emplace("GAADCACGG", "AreSplitscreenControlsEnabled");
	s_NamedLUIFunctions.emplace("DGAEJFAFDD", "GetControllerInUse");
	s_NamedLUIFunctions.emplace("FFJCFAJCC", "BootCheckActivate");
	s_NamedLUIFunctions.emplace("CECJFAEEEI", "BootCheckIsBlocking");
	s_NamedLUIFunctions.emplace("CJFJFEJIJD", "BootCheckIsCorruptSaveDataDetected");
	s_NamedLUIFunctions.emplace("BBHEAJBCHF", "BootCheckCorruptSaveDataDialogClosed");
	s_NamedLUIFunctions.emplace("BHIJFFCAEB", "SystemRestart");
	s_NamedLUIFunctions.emplace("BHFFIBEFFH", "MeasureResourceEventStart");
	s_NamedLUIFunctions.emplace("DCHDDCJCEG", "MeasureResourceEventEnd");
	s_NamedLUIFunctions.emplace("BHCDIBBGGB", "TelemetryMenuChange");
	s_NamedLUIFunctions.emplace("DIIHGGEBBJ", "TelemetryPrestige");
	s_NamedLUIFunctions.emplace("DJEDHFJFCD", "StoreItemViewBegan");
	s_NamedLUIFunctions.emplace("BABEBICCIE", "StoreItemViewEnded");
	s_NamedLUIFunctions.emplace("BACIFDBICF", "StoreOpened");
	s_NamedLUIFunctions.emplace("BGIAICIDDI", "StoreClosed");
	s_NamedLUIFunctions.emplace("BCDHJIHBAA", "GenerateStoreSessionId");
	s_NamedLUIFunctions.emplace("EHGIGBJJC", "GetStoreData_0");
	s_NamedLUIFunctions.emplace("DBFHBBIDHD", "GetCategoryData_0");
	s_NamedLUIFunctions.emplace("CIFIHAAJGD", "GetLayoutData_0");
	s_NamedLUIFunctions.emplace("CEGFGEGBEH", "CRMGetMessageContent");
	s_NamedLUIFunctions.emplace("CJIAHJHHDJ", "CRMSendDlogEvent");
	s_NamedLUIFunctions.emplace("CJBCJBAIAF", "CRMGetMaxMessageCount");
	s_NamedLUIFunctions.emplace("CIJDCFGGHD", "CRMGetValidMessageCount");
	s_NamedLUIFunctions.emplace("GCDIBICIF", "CRMFetchMessagesAsync");
	s_NamedLUIFunctions.emplace("DGGGEGCC", "CRMClearLocallyCachedData");
	s_NamedLUIFunctions.emplace("BCEHEAHAHI", "CRMRedeemAllCodesForMessage");
	s_NamedLUIFunctions.emplace("DFBHAJECAH", "IsFrontEndLevelInitialized");
	s_NamedLUIFunctions.emplace("DHFCHIIJCA", "SetFrontEndSceneSection");
	s_NamedLUIFunctions.emplace("BCIEFAHEIJ", "LightBarReset");
	s_NamedLUIFunctions.emplace("CGEHBDEEJE", "LightBarResetAll");
	s_NamedLUIFunctions.emplace("CHAHCCAJEB", "LightBarSetColor");
	s_NamedLUIFunctions.emplace("CJDGDIGBI", "PlayRumble");
	s_NamedLUIFunctions.emplace("CHDJJHJGHH", "RegisterAccount");
	s_NamedLUIFunctions.emplace("EIHIFJBEC", "MakeRootFullscreen");
	s_NamedLUIFunctions.emplace("DJEEFDHHFB", "MakeRootSplitscreen");
	s_NamedLUIFunctions.emplace("CEHIEICIFD", "GetMountTutorialString");
	s_NamedLUIFunctions.emplace("CIHICIEBIA", "CompleteTutorial");
	s_NamedLUIFunctions.emplace("ECCJEIDDC", "IsTutorialCompleted");
	s_NamedLUIFunctions.emplace("BFJBEHGGCH", "IsDedi");
	s_NamedLUIFunctions.emplace("DAJIFJIJED", "SaveCurrentSPMissions");
	s_NamedLUIFunctions.emplace("ECGBJEGHJG", "IsHardcoreMPActive");
	s_NamedLUIFunctions.emplace("CADJGGAAGJ", "GetGameTypeIndex");
	s_NamedLUIFunctions.emplace("EBCDCFCBE", "IsXUIDInvalid");
	s_NamedLUIFunctions.emplace("EACHICHBCD", "IsLocalServerPaused");
	s_NamedLUIFunctions.emplace("BHEFHGDGAD", "SaveChallengeAsDone");
	s_NamedLUIFunctions.emplace("BDGIEFCCJE", "IsTrialLicense");
	s_NamedLUIFunctions.emplace("BAJIADIDFC", "ShouldShowPostMatchSurvey");
	s_NamedLUIFunctions.emplace("EEDIGBACC", "PostMatchSurveyResponded");
	s_NamedLUIFunctions.emplace("DEGBFBAHCD", "GameDVRProhibitRecording");
	s_NamedLUIFunctions.emplace("BDGJFCCCJ", "GameDVRProhibitScreenshots");
	s_NamedLUIFunctions.emplace("CCHAIADBGH", "OnLANCreateGame");
	s_NamedLUIFunctions.emplace("BJEAFDBHHJ", "OnPrivateCreateGame");
	s_NamedLUIFunctions.emplace("BHCBGBFEJI", "IsLocalPlayAllowed");
	s_NamedLUIFunctions.emplace("CCDFBBIBIJ", "IsCrossPlayToggleAllowed");
	s_NamedLUIFunctions.emplace("CEEFAFFHIE", "AllowCrossPlayToggle");
	s_NamedLUIFunctions.emplace("FIDIEBFAG", "IsCrossPlayEnabled");
	s_NamedLUIFunctions.emplace("BBHCDCACGA", "SetCrossPlayEnabled");
	s_NamedLUIFunctions.emplace("DJFGIIBCBH", "GetHasCrossplayPermissions");
	s_NamedLUIFunctions.emplace("BHECIAHGC", "ShowWebBrowser");
	s_NamedLUIFunctions.emplace("CDCBBGFHJA", "HasSocialNetworkPrivileges");
	s_NamedLUIFunctions.emplace("FEDEBFDHD", "SendEventToNetLua");
	s_NamedLUIFunctions.emplace("CICDHFEABA", "IsLUIProfile");
	s_NamedLUIFunctions.emplace("DJAFAHJFED", "ProfileBeginEvent");
	s_NamedLUIFunctions.emplace("BJCDJGCFJJ", "ProfileEndEvent");
	s_NamedLUIFunctions.emplace("CBCJDCHCCD", "GetLastInputType");
	s_NamedLUIFunctions.emplace("CFFFHJHGAA", "ForceLastInputType");
	s_NamedLUIFunctions.emplace("HJJJIGAC", "ForceMouseMoveEvent");
	s_NamedLUIFunctions.emplace("BFAABIIGDC", "CaptureMouse");
	s_NamedLUIFunctions.emplace("EHBHDBFHE", "SetFocusChainInfo");
	s_NamedLUIFunctions.emplace("BDJHIJJHGG", "GetSignInState");
	s_NamedLUIFunctions.emplace("BCCGADID", "GetBattleNetConnectionState");
	s_NamedLUIFunctions.emplace("DJHABIGCGE", "GetSignInErrorString");
	s_NamedLUIFunctions.emplace("EDFJDAHID", "ShouldShowLinkToPhoneInError");
	s_NamedLUIFunctions.emplace("BAAABFICDA", "GetBattleNetFenceState");
	s_NamedLUIFunctions.emplace("DBDHEJCHCI", "HasDisconnectedAfterSignin");
	s_NamedLUIFunctions.emplace("EAIBAGFDCD", "SetPresenceContext");
	s_NamedLUIFunctions.emplace("BHHAAHFCFC", "SetUIReadyToProcessInviteJoins");
	s_NamedLUIFunctions.emplace("IDHBHGDFE", "ShouldLeavePrivatePartyButtonBeEnabled");
	s_NamedLUIFunctions.emplace("DHIIBJFHCJ", "ShouldInviteToPrivatePartyButtonBeEnabled");
	s_NamedLUIFunctions.emplace("CIBBIJJCFB", "ShouldKickFromPrivatePartyButtonBeEnabled");
	s_NamedLUIFunctions.emplace("CBCEBADAJ", "GetMaxPrivatePartySlotsForGamemode");
	s_NamedLUIFunctions.emplace("CGEFDFCIJA", "GetMemberCountInPrivateParty");
	s_NamedLUIFunctions.emplace("CGIHIFHGAF", "ResetMaxPrivatePartySizeForMainMenu");
	s_NamedLUIFunctions.emplace("CBAGDDEAFH", "SetMaxPrivatePartySize");
	s_NamedLUIFunctions.emplace("CIFCEGIDAI", "ShouldCurrentSessionBeClosed");
	s_NamedLUIFunctions.emplace("JBIHDJBH", "IsBattleNetAuthReady");
	s_NamedLUIFunctions.emplace("GEHBEDCEC", "IsInIGRPaidSession");
	s_NamedLUIFunctions.emplace("DDHFCGHJEA", "IsKoreanAccount");
	s_NamedLUIFunctions.emplace("FABABBDBA", "IsKorean15PlusAccount");
	s_NamedLUIFunctions.emplace("DIEEIEFCFF", "IsKoreanIGR");
	s_NamedLUIFunctions.emplace("DDAEJCJEA", "GetKoreaIGRXPBonusRate");
	s_NamedLUIFunctions.emplace("BAHJDDBGHC", "GetKoreaIGRWeaponXPBonusRate");
	s_NamedLUIFunctions.emplace("DGEJEAHEGH", "GetKoreaIGRBattlePassXPBonusRate");
	s_NamedLUIFunctions.emplace("ECADDGAFF", "UsesHWMouseCursor");
	s_NamedLUIFunctions.emplace("DDGIGAGHC", "EnableHWMouseCursor");
	s_NamedLUIFunctions.emplace("DCEDEGBFEJ", "SetHWMouseCursorType");
	s_NamedLUIFunctions.emplace("DEGIFDFHA", "GetCurrentWorldMap");
	s_NamedLUIFunctions.emplace("CDFHFJGICJ", "GetAntiAddictionTipsDesc");
	s_NamedLUIFunctions.emplace("BGBABIIFGJ", "OnAntiAddictionTipsConfirmed");
	s_NamedLUIFunctions.emplace("CBGGJIBJBH", "AreGlobalSpecificAndGroupZonesRequested");
	s_NamedLUIFunctions.emplace("CECBDGIHED", "SetLuiLayerKeyCatcher");
	s_NamedLUIFunctions.emplace("BHICHBJEHH", "SetIsInOverlayMenu");
	s_NamedLUIFunctions.emplace("DHEJECBEE", "IsConnectedToGameServer");
	s_NamedLUIFunctions.emplace("CDFDBHEFGA", "PromptRequiresBacking");
	s_NamedLUIFunctions.emplace("ECDECFCHJA", "IsUnbound");
	s_NamedLUIFunctions.emplace("BIAFEJHHDD", "GetBattlenetCatalogError");
	s_NamedLUIFunctions.emplace("DCFIDJGACA", "ClearBattlenetCatalogError");
	s_NamedLUIFunctions.emplace("CBHCHAFFBG", "NvidiaHighlightsRequestPermissions");
	s_NamedLUIFunctions.emplace("CFJEBEJCFC", "NvidiaHighlightsEnabled");
	s_NamedLUIFunctions.emplace("DCEFDHHFGD", "NvidiaHighlightsConfigurationSuccessful");
	s_NamedLUIFunctions.emplace("EGIICJGCF", "NvidiaHighlightsBeginGroup");
	s_NamedLUIFunctions.emplace("EFCHBAIF", "NvidiaHighlightsEndGroup");
	s_NamedLUIFunctions.emplace("CAAEDJHHH", "NvidiaHighlightsScreenshot");
	s_NamedLUIFunctions.emplace("DIHBAJHIGG", "NvidiaHighlightsVideo");
	s_NamedLUIFunctions.emplace("BJFJDCFDID", "NvidiaHighlightsSummary");
	s_NamedLUIFunctions.emplace("EBEJAAJGDG", "NvidiaHighlightsFetchCountAsync");
	s_NamedLUIFunctions.emplace("BGJDFBGDHF", "NvidiaHighlightsCleanup");
	s_NamedLUIFunctions.emplace("GGFCHCDDE", "IsUsingPS4Controller");
	s_NamedLUIFunctions.emplace("DFAJCBFIAB", "GetRevenueRateType");
	s_NamedLUIFunctions.emplace("CEGDBDIIIE", "IsGameModeAllowed");
	s_NamedLUIFunctions.emplace("ECHHDAIBD", "GetContentProgress");
	s_NamedLUIFunctions.emplace("DBEGJIECGB", "IsGameModeAvailable");
	s_NamedLUIFunctions.emplace("CIACGBJGJ", "SwapControllers");
	s_NamedLUIFunctions.emplace("BDGDDJGBF", "SetControllerMissing");
	s_NamedLUIFunctions.emplace("DCFICDHCII", "GetOldControllerMissing");
	s_NamedLUIFunctions.emplace("CIGHGHEJHH", "IsImageAssetLoaded");
	s_NamedLUIFunctions.emplace("DHEEHAJFEA", "IsEntitySystemAllocated");
	s_NamedLUIFunctions.emplace("DADEEDCCAC", "GetPlayerCardDataFromXUID");
	s_NamedLUIFunctions.emplace("CICGDFHGHH", "GetPrivatePartyHostName");
	s_NamedLUIFunctions.emplace("BCHFJIJGJD", "SetLobbyStreamingPos");
	s_NamedLUIFunctions.emplace("BGDHBAFGCG", "RemoveSplitScreenPlayer");
	s_NamedLUIFunctions.emplace("CJAEBHAHBB", "UploadHardwareSettings");
	s_NamedLUIFunctions.emplace("BJIBIJHDFJ", "DoesPartyContainSplitscreenPlayer");
	s_NamedLUIFunctions.emplace("CBBGEEFIFI", "IsPartyMemberPremium");
	s_NamedLUIFunctions.emplace("JACCCCEDI", "DoesPartyContainNonPremiumPlayers");
	s_NamedLUIFunctions.emplace("HBIAGEFCC", "CanAllPartyMembersPlaySubscriptionRequiredContent");
	s_NamedLUIFunctions.emplace("CAFIEFFIHF", "LootCrateCameraShake");
	s_NamedLUIFunctions.emplace("CIIBCJJCIB", "DoesPartyContainCrossplayPlayer");
	s_NamedLUIFunctions.emplace("BEAJHICIEF", "DoesLobbyContainCrossplayPlayer");
	s_NamedLUIFunctions.emplace("CGHHDHCDEC", "GetOtherLocalClientsController");
	s_NamedLUIFunctions.emplace("HHGGGGB", "OwnsBaseGame");
	s_NamedLUIFunctions.emplace("CIHDBEDCJE", "AreAnyInfilGameplayTransientsRequested");
	s_NamedLUIFunctions.emplace("CGJHAIGFAE", "AreAllInfilGameplayTransientsLoaded");
	s_NamedLUIFunctions.emplace("BICHFDHCCB", "IsInfilTransientRequested");
	s_NamedLUIFunctions.emplace("DDJDHHCJG", "IsInfilTransientLoaded");
	s_NamedLUIFunctions.emplace("BFFJDBBHIF", "IsPlayAgainAllowed");
	s_NamedLUIFunctions.emplace("DFBHGABBCH", "IsControllerIndexActive");
	s_NamedLUIFunctions.emplace("CAGFEHGHGH", "IsPlayerUsingButtonLayoutBumperPing");
	s_NamedLUIFunctions.emplace("CIHGCHIBEI", "IsCurrentButtonLayoutFlipped");
	s_NamedLUIFunctions.emplace("EEGHCCDG", "IsClientConnectionActive");
	s_NamedLUIFunctions.emplace("JGAEIIIGD", "AntiCheatFeatureBanTimeRemainingDisplayString");
	s_NamedLUIFunctions.emplace("BJBBEBFBD", "NextGameLaunchOrFirstPartyStore");

	// Friends_methods
	s_NamedLUIFunctions.emplace("DAHGHDHFIA", "GetFriendsData");
	s_NamedLUIFunctions.emplace("FBFFEFEGB", "GetMixedFriendsData");
	s_NamedLUIFunctions.emplace("FAHJIEFAH", "GetDefaultExpandedSocialMenuList");
	s_NamedLUIFunctions.emplace("CADJIDDGA", "GetWhisperableFriendsNames");
	s_NamedLUIFunctions.emplace("DIIAFCGBDA", "IsPlatformFriend");
	s_NamedLUIFunctions.emplace("BIAJAECICH", "IsCrossplayFriend");
	s_NamedLUIFunctions.emplace("CCBABDAGGJ", "GetFriendDetails");
	s_NamedLUIFunctions.emplace("BEJHAIFIAB", "XUIDToString");
	s_NamedLUIFunctions.emplace("CAIJHBHGGC", "XUIDFromString");
	s_NamedLUIFunctions.emplace("DCFFGGACDD", "GetPrivatePartyNumSlots");
	s_NamedLUIFunctions.emplace("BJDEIGDDCD", "GetPrivatePartyMembers");
	s_NamedLUIFunctions.emplace("BAGCHIDGCC", "IsPrivatePartyCrossplay");
	s_NamedLUIFunctions.emplace("GHGFJIJBI", "IsPrivatePartyHostF2P");
	s_NamedLUIFunctions.emplace("DECFEGAABC", "GetOnlineFriendsCount");
	s_NamedLUIFunctions.emplace("DECIABAAIE", "GetDetailedOnlineFriendsCount");
	s_NamedLUIFunctions.emplace("IGAEBDJEJ", "CountPendingPlaystationInvites");
	s_NamedLUIFunctions.emplace("DDCDJHHHJG", "GetOnlineFriendClanTag");
	s_NamedLUIFunctions.emplace("DDFBAFGJJI", "GetOnlineFriendPatch");
	s_NamedLUIFunctions.emplace("CJIAHDDJIJ", "GetOnlineFriendPatchbacking");
	s_NamedLUIFunctions.emplace("DCJCAIEHBG", "GetOnlineFriendBackground");
	s_NamedLUIFunctions.emplace("ECIFBFCECC", "GetOnlineFriendRank");
	s_NamedLUIFunctions.emplace("CIIIACIHGH", "GetOnlineFriendAlienRank");
	s_NamedLUIFunctions.emplace("BIGEAHJCJF", "GetOnlineFriendPrestige");
	s_NamedLUIFunctions.emplace("EBJAIACCEC", "GetOnlineFriendAlienPrestige");
	s_NamedLUIFunctions.emplace("FCEDCBCJF", "SetOnlineFriendStoredXUID");
	s_NamedLUIFunctions.emplace("DBEBGDCJCF", "ShowOnlineFriendGamercard");
	s_NamedLUIFunctions.emplace("CFBFGBECEB", "ShowPlayerCard");
	s_NamedLUIFunctions.emplace("GGDCJJGBI", "CanShowFriendGamercard");
	s_NamedLUIFunctions.emplace("FFCBJHBGI", "ReportOnlineFriend");
	s_NamedLUIFunctions.emplace("DACCIAAAAB", "JoinOnUser");
	s_NamedLUIFunctions.emplace("DEFGJFEHJJ", "GetRecentPlayersCount");
	s_NamedLUIFunctions.emplace("DGEJJACHHF", "GetRecentPlayerGamertag");
	s_NamedLUIFunctions.emplace("BFEIEEBFJG", "GetRecentPlayerPresence");
	s_NamedLUIFunctions.emplace("CFJDCHCABD", "GetRecentPlayerClanTag");
	s_NamedLUIFunctions.emplace("FJIDFHBHB", "GetRecentPlayerPatch");
	s_NamedLUIFunctions.emplace("EBEBFEHDFE", "GetRecentPlayerPatchbacking");
	s_NamedLUIFunctions.emplace("BHHEFDJCBF", "GetRecentPlayerBackground");
	s_NamedLUIFunctions.emplace("CFAEFGDGFH", "GetRecentPlayerRank");
	s_NamedLUIFunctions.emplace("CDIHDAEIJI", "GetRecentPlayerAlienRank");
	s_NamedLUIFunctions.emplace("CEHADFDEHG", "GetRecentPlayerPrestige");
	s_NamedLUIFunctions.emplace("CEABIIIID", "GetRecentPlayerAlienPrestige");
	s_NamedLUIFunctions.emplace("ECFAHGIBIE", "SetRecentPlayerStoredXUID");
	s_NamedLUIFunctions.emplace("CCDGAGCFGE", "ShowRecentPlayerGamercard");
	s_NamedLUIFunctions.emplace("DIFEDHICHE", "ShowRecentPlayerGroups");
	s_NamedLUIFunctions.emplace("DDIEJHFAHG", "RequestRecentPlayerAsFriend");
	s_NamedLUIFunctions.emplace("BJDEJDCHJB", "ReportRecentPlayer");
	s_NamedLUIFunctions.emplace("EHAAGBJJI", "IsRecentPlayerAFriend");
	s_NamedLUIFunctions.emplace("CEEBGIGHIJ", "GetLivePartyFriendsCount");
	s_NamedLUIFunctions.emplace("DAJFEJDCDD", "GetLivePartyFriendGamertag");
	s_NamedLUIFunctions.emplace("DAFGDEFEAC", "GetLivePartyFriendPresence");
	s_NamedLUIFunctions.emplace("DDHHHGJIBB", "GetLivePartyFriendClanTag");
	s_NamedLUIFunctions.emplace("CHBJFHIJAF", "GetLivePartyFriendPatch");
	s_NamedLUIFunctions.emplace("BGIHJGFGIA", "GetLivePartyFriendPatchbacking");
	s_NamedLUIFunctions.emplace("CIBBEBDCJH", "GetLivePartyFriendBackground");
	s_NamedLUIFunctions.emplace("BEGDDEHAJJ", "GetLivePartyFriendRank");
	s_NamedLUIFunctions.emplace("CCEJGHDGIE", "GetLivePartyFriendAlienRank");
	s_NamedLUIFunctions.emplace("ECCBIBAIDI", "GetLivePartyFriendPrestige");
	s_NamedLUIFunctions.emplace("ECJAIBJGDH", "GetLivePartyFriendAlienPrestige");
	s_NamedLUIFunctions.emplace("EAFHBIHEBI", "SetLivePartyFriendStoredXUID");
	s_NamedLUIFunctions.emplace("CIGBDFFGHH", "ReportLivePartyFriend");
	s_NamedLUIFunctions.emplace("CIBEABFIJI", "IsUserInBlockList");
	s_NamedLUIFunctions.emplace("IJHFCGEBD", "FavoriteFriendsEnabled");
	s_NamedLUIFunctions.emplace("BJCCHBCCEI", "GetNumberOfFavoriteFriends");
	s_NamedLUIFunctions.emplace("DGICIJGBGB", "AddToFavoriteUsers");
	s_NamedLUIFunctions.emplace("ECIAEDEBCF", "AddToFavoriteUsersButtonDisabled");
	s_NamedLUIFunctions.emplace("DIIFJGIIBA", "RemoveFromFavoriteFriends");
	s_NamedLUIFunctions.emplace("GFHEFICGF", "RemoveFromFavoriteUsersButtonDisabled");
	s_NamedLUIFunctions.emplace("FDBGHIFEE", "FavoriteFriendsViewProfileButtonDisabled");

	// s_dvarFunctions
	s_NamedLUIFunctions.emplace("DHEEJCCJBH", "GetDvarString");
	s_NamedLUIFunctions.emplace("CFHDGABACF", "GetDvarInt");
	s_NamedLUIFunctions.emplace("BJJCJHDBII", "GetDvarFloat");
	s_NamedLUIFunctions.emplace("GDDCIAIIG", "GetDvarVector3");
	s_NamedLUIFunctions.emplace("IBEGCHEFE", "GetDvarBool");
	s_NamedLUIFunctions.emplace("BDHJDHBBGG", "GetDvarEnumNext");
	s_NamedLUIFunctions.emplace("DBCJGCDGDI", "GetDvarEnumPrev");
	s_NamedLUIFunctions.emplace("DCEBHAJGCJ", "GetDvarEnumList");
	s_NamedLUIFunctions.emplace("EBBAIAEICC", "GetDvarType");
	s_NamedLUIFunctions.emplace("DEHABCCECE", "DvarExists");
	s_NamedLUIFunctions.emplace("BDEHAEGHAF", "SetDvarString");
	s_NamedLUIFunctions.emplace("DFIJDJFIFD", "SetDvarInt");
	s_NamedLUIFunctions.emplace("IICIFEEDC", "SetDvarFloat");
	s_NamedLUIFunctions.emplace("DHEGHJJJHI", "SetDvarBool");
	s_NamedLUIFunctions.emplace("BJCGHFBEDF", "SetDvarColor");
	s_NamedLUIFunctions.emplace("DAACJFEEDC", "SetDvarLatch");
	s_NamedLUIFunctions.emplace("BBAICIAGH", "ResetDvar");
	s_NamedLUIFunctions.emplace("DBGFIDHBFC", "GetDvarDefaultValue");

	// s_tableFunctions
	s_NamedLUIFunctions.emplace("DIFCHIGDFB", "TableLookup");
	s_NamedLUIFunctions.emplace("CEBAGDAEJJ", "TableLookupMultipleKeys");
	s_NamedLUIFunctions.emplace("CBGJCDIHCE", "TableLookupByRow");
	s_NamedLUIFunctions.emplace("BJJBBCJGEJ", "TableLookupGetRowNum");
	s_NamedLUIFunctions.emplace("BABCABFJEJ", "TableLookupMultipleKeysGetRowNum");
	s_NamedLUIFunctions.emplace("BFBFCFCDJD", "TableExists");
	s_NamedLUIFunctions.emplace("BFHCAIIDA", "TableGetRowCount");

	// s_unlockFunctions
	s_NamedLUIFunctions.emplace("BFCEGDJIEI", "IsUnlocked");

	// s_Social_methods
	s_NamedLUIFunctions.emplace("CJADDJHDGH", "GetJoinedChats");
	s_NamedLUIFunctions.emplace("ECAJABJEHB", "SendMessageToChat");
	s_NamedLUIFunctions.emplace("CEFBABBCGD", "SendSystemEventToChat");
	s_NamedLUIFunctions.emplace("BEFGJDEHCF", "SendSystemErrorToChat");
	s_NamedLUIFunctions.emplace("DAFDEJICJJ", "SendPlayerEventToChat");
	s_NamedLUIFunctions.emplace("BBFEJIEGJG", "GetMembersListFromChat");
	s_NamedLUIFunctions.emplace("BHEGJFCDAE", "GetCurrentTimeString");
	s_NamedLUIFunctions.emplace("DFHFDFDDHF", "GetMessagesFromChat");
	s_NamedLUIFunctions.emplace("CAHAEIIBJJ", "GetMessagesFromChatType");
	s_NamedLUIFunctions.emplace("DHEAIGFEBI", "GetXUIDFromBNetAccountID");
	s_NamedLUIFunctions.emplace("CJFAIBEFJG", "GetXUIDFromBNetPrivateChatId");
	s_NamedLUIFunctions.emplace("DBFGBICCJA", "IsChatBattleNetWhisper");
	s_NamedLUIFunctions.emplace("CEAACEBEBG", "FindPlayersWithGamertag");
	s_NamedLUIFunctions.emplace("HGFFAFCDI", "CreatePrivateChat");
	s_NamedLUIFunctions.emplace("EAIBCCEDBI", "LeaveChat");
	s_NamedLUIFunctions.emplace("FGCBBBBBE", "SetTypingIndicatorForChat");
	s_NamedLUIFunctions.emplace("CHBBHFHJEH", "IsLocalPlayer");
	s_NamedLUIFunctions.emplace("DEAFJIFCFE", "SetOnlineStatus");
	s_NamedLUIFunctions.emplace("ECDAFHBHGC", "GetOnlineStatus");
	s_NamedLUIFunctions.emplace("BCACHCIEIA", "GetOnlineStatusForBNet");
	s_NamedLUIFunctions.emplace("CDFEICCEFJ", "IsRemotePlayerOnline");
	s_NamedLUIFunctions.emplace("FABAGIEHH", "GetPresenceFields");
	s_NamedLUIFunctions.emplace("CFEIHAADEI", "GetPresenceFieldsByPlatformId");
	s_NamedLUIFunctions.emplace("EBJFEHBAID", "RemoveFriend");
	s_NamedLUIFunctions.emplace("EAFICEHEHI", "HasFriendRequestFromPlatformId");
	s_NamedLUIFunctions.emplace("IBEHACGBI", "AcceptFriendRequest");
	s_NamedLUIFunctions.emplace("DHHEFJGEJC", "RevokeFriendRequest");
	s_NamedLUIFunctions.emplace("JHHJICGHG", "IgnoreFriendRequest");
	s_NamedLUIFunctions.emplace("JJAJFEAC", "GetAllRequestsSent");
	s_NamedLUIFunctions.emplace("BEACFEJFD", "GetAllRequestsReceived");
	s_NamedLUIFunctions.emplace("EBDBIJICCE", "GetAllBlockedPlayers");
	s_NamedLUIFunctions.emplace("BIFIFEECCJ", "BlockPlayer");
	s_NamedLUIFunctions.emplace("JGFDEBFAC", "UnblockPlayer");
	s_NamedLUIFunctions.emplace("BGEBDBIHFA", "CanWhisperUser");
	s_NamedLUIFunctions.emplace("DIGABIEEAG", "AddFriendCrossplay");
	s_NamedLUIFunctions.emplace("DEIAGIIJDF", "AddFriendCrossplayByXuid");
	s_NamedLUIFunctions.emplace("CDFFGDDEHF", "RemoveFriendCrossplay");
	s_NamedLUIFunctions.emplace("BIHDCJGFCI", "AcceptFriendRequestCrossplay");
	s_NamedLUIFunctions.emplace("BHCIIHHAAC", "RevokeFriendRequestCrossplay");
	s_NamedLUIFunctions.emplace("CGIDFEJECG", "IgnoreFriendRequestCrossplay");
	s_NamedLUIFunctions.emplace("BGDFCJDBFC", "GetAllRequestsSentCrossplay");
	s_NamedLUIFunctions.emplace("ECEAGBGCJH", "GetAllRequestsReceivedCrossplay");
	s_NamedLUIFunctions.emplace("BGIFHFADA", "GetAllBlockedPlayersCrossplay");
	s_NamedLUIFunctions.emplace("DACDEGEDDD", "BlockPlayerCrossplay");
	s_NamedLUIFunctions.emplace("EIGAJHEGI", "UnblockPlayerCrossplay");
	s_NamedLUIFunctions.emplace("ECHBFGEHFI", "GetFriendTab");
	s_NamedLUIFunctions.emplace("BCDHJIFIDE", "GetPartyInvitationsCount");
	s_NamedLUIFunctions.emplace("DJBGBJIIF", "GetPartyInvitations");
	s_NamedLUIFunctions.emplace("BDIGHHGJEH", "GetPartyInvitationsAllPlatform");
	s_NamedLUIFunctions.emplace("EABAJJFIEI", "GetPlayerCrossplayGamertag");
	s_NamedLUIFunctions.emplace("HCGJEAAHE", "GetPlatformFriendCrossplayGamertag");
	s_NamedLUIFunctions.emplace("BEEDHHIEGB", "GetXuidFromFriendPlatformId");
	s_NamedLUIFunctions.emplace("BFEBABDDDE", "ResolveXuidToPlatformIdAsync");
	s_NamedLUIFunctions.emplace("CCAJIDGI", "ResolveXuidToUsernameAsync");
	s_NamedLUIFunctions.emplace("BFDFCAHCEA", "IsRecentPlayerListFetched");
	s_NamedLUIFunctions.emplace("CJCJIAEGDH", "CheckChatBlocked");
	s_NamedLUIFunctions.emplace("CCJHHEBGB", "GetSentInvitesAllPlatform");
	s_NamedLUIFunctions.emplace("CJABAFIDIG", "GetReceivedRequestsAllPlatform");
	s_NamedLUIFunctions.emplace("EBCDCJGEJD", "GetBlockedPlayersAllPlatform");

	// Lobby_methods
	s_NamedLUIFunctions.emplace("GFFECBCCF", "IsInPrivateParty");
	s_NamedLUIFunctions.emplace("CECBCJDIAG", "IsAloneInPrivateParty");
	s_NamedLUIFunctions.emplace("DBJHBACBBE", "GetMatchmakerStatus");
	s_NamedLUIFunctions.emplace("BGIBDIBHH", "GetPartyStatus");
	s_NamedLUIFunctions.emplace("CCCCACICHH", "IsSearching");
	s_NamedLUIFunctions.emplace("EBDDFIIHID", "IsInDWLobby");

	// Lobby_methods_0
	s_NamedLUIFunctions.emplace("BHHDDECHII", "GetMemberCount");
	s_NamedLUIFunctions.emplace("ECECBBFDEG", "SetLocalPlayerTeam");
	s_NamedLUIFunctions.emplace("CHDFIEBEDI", "GetLobbyMemberStats");
	s_NamedLUIFunctions.emplace("CAACIBBCIF", "UsingReadyUpFeature");
	s_NamedLUIFunctions.emplace("BAHGAJDIJA", "GetLocalReadyUpFlag");
	s_NamedLUIFunctions.emplace("CHBJDHJBFA", "SetLocalReadyUpFlag");
	s_NamedLUIFunctions.emplace("HGIGJIAIJ", "ClearLocalReadyUpFlag");
	s_NamedLUIFunctions.emplace("JAFDICAIJ", "GetPartyReadyUpStatus");
	s_NamedLUIFunctions.emplace("BAGBDFDEBG", "ExecPrestigeReset");
	s_NamedLUIFunctions.emplace("DIEJCJCFCE", "ExecAliensPrestigeReset");
	s_NamedLUIFunctions.emplace("DEDJDFCGIA", "GetMaxPrestigeLevel");
	s_NamedLUIFunctions.emplace("DCDGDIAIFH", "GetPlayerPrestigeLevel");
	s_NamedLUIFunctions.emplace("DFFFFJHCEH", "IsGameHost");
	s_NamedLUIFunctions.emplace("BGIADHIHAG", "IsPrivatePartyHost");
	s_NamedLUIFunctions.emplace("BHDEBJAEA", "GetPrivatePartyHostControllerIndex");
	s_NamedLUIFunctions.emplace("BJBBDIDHDA", "IsControllerIndexHostOfAnyParty");
	s_NamedLUIFunctions.emplace("DBGCBHHHIE", "IsPartyHostWaitingOnMembers");
	s_NamedLUIFunctions.emplace("DFCFDHBBHH", "IsPrivatePartyHostInLobby");
	s_NamedLUIFunctions.emplace("DIEAFDIH", "PartyClientsUpToDate");
	s_NamedLUIFunctions.emplace("JFFGJFAIA", "IsUsingIntermissionTimer");
	s_NamedLUIFunctions.emplace("EBBJJFGGIH", "UseIntermissionTimer");
	s_NamedLUIFunctions.emplace("DIDBDHFDGG", "StopIntermissionTimer");
	s_NamedLUIFunctions.emplace("CDHCDFHHJJ", "BotsAreAllowed");
	s_NamedLUIFunctions.emplace("CAEJIEEEDF", "GetBotsConnectType");
	s_NamedLUIFunctions.emplace("CJBHJEAFGH", "SetBotsConnectType");
	s_NamedLUIFunctions.emplace("DHFDGHJIIA", "GetBotsConnectTypeCount");
	s_NamedLUIFunctions.emplace("DHBAICDCJC", "GetBotsDifficulty");
	s_NamedLUIFunctions.emplace("BGJCGDFHGA", "SetBotsDifficulty");
	s_NamedLUIFunctions.emplace("DBBGAHJDAB", "GetBotsDifficultyCount");
	s_NamedLUIFunctions.emplace("BEAJCIDDGF", "GetBotsTeamLimit");
	s_NamedLUIFunctions.emplace("DGDIGJDHH", "SetBotsTeamLimit");
	s_NamedLUIFunctions.emplace("BIFCAHEHAA", "GetMapImage");
	s_NamedLUIFunctions.emplace("EBFJDJEJJE", "GetMapImageByName");
	s_NamedLUIFunctions.emplace("BDBGIGDJJG", "GetVoteMapImage");
	s_NamedLUIFunctions.emplace("GAHGHDBIA", "GetVoteMapName");
	s_NamedLUIFunctions.emplace("CGAFFFJBCD", "GetVoteMapGametype");
	s_NamedLUIFunctions.emplace("ECIFCJJJIA", "GetMapName");
	s_NamedLUIFunctions.emplace("BFFJAJFBDH", "HasVotePassed");
	s_NamedLUIFunctions.emplace("HEEEIDBJE", "HasPartyCastVote");
	s_NamedLUIFunctions.emplace("DEAABHGCAF", "GameTypeNameAbbreviated");
	s_NamedLUIFunctions.emplace("BCIDJGIGEA", "CanCancelMatchStart");
	s_NamedLUIFunctions.emplace("GEHGIJIGB", "GetAlienRankForXP");
	s_NamedLUIFunctions.emplace("IHEAAHBE", "IsItemOfTypeUnlocked");
	s_NamedLUIFunctions.emplace("HEGDIBBCI", "BuildServerList");
	s_NamedLUIFunctions.emplace("JIFFFICJH", "RefreshServerList");
	s_NamedLUIFunctions.emplace("IDFHIHJCF", "UpdateServerDisplayList");
	s_NamedLUIFunctions.emplace("ECJBHGFDH", "GetServerCount");
	s_NamedLUIFunctions.emplace("CDAFGHBJCA", "GetServerData");
	s_NamedLUIFunctions.emplace("CBHADHEHAH", "CreateServersDataModels");
	s_NamedLUIFunctions.emplace("DCJFBFGGHG", "StartServer");
	s_NamedLUIFunctions.emplace("DEHBAFGJCC", "CancelStartServer");
	s_NamedLUIFunctions.emplace("CGBABCCHJI", "SetServerClientCount");
	s_NamedLUIFunctions.emplace("CCIAIGDIIC", "JoinServer");
	s_NamedLUIFunctions.emplace("DEFCCIGHCF", "GetMapFeederCount");
	s_NamedLUIFunctions.emplace("CAAHCDGEDH", "GetMapNameByIndex");
	s_NamedLUIFunctions.emplace("DIIFDCEJJ", "GetMapGameTypesByIndex");
	s_NamedLUIFunctions.emplace("DIJCBCJCAH", "GetMapSupportsAliensByIdx");
	s_NamedLUIFunctions.emplace("BGCBFAABHB", "GetMapDescByIndex");
	s_NamedLUIFunctions.emplace("CJEHDHDGBH", "GetMapLoadNameByIndex");
	s_NamedLUIFunctions.emplace("EAJBIDDDGF", "GetMapImageByIndex");
	s_NamedLUIFunctions.emplace("CBEIEIFCEF", "GetMapPackForMapIndex");
	s_NamedLUIFunctions.emplace("FADGDJDJI", "IncludeMapInRotation");
	s_NamedLUIFunctions.emplace("CAHAAGHIEI", "IsMapInRotation");
	s_NamedLUIFunctions.emplace("BFJBJDFBIF", "GetNonPlayingLocalClientText");
	s_NamedLUIFunctions.emplace("BCJAAJAHDD", "AreAllUsersLocal");
	s_NamedLUIFunctions.emplace("CIIBDIGFFC", "SetUsingMLGRules");
	s_NamedLUIFunctions.emplace("DFHGBJJAGC", "IsUsingMLGRules");
	s_NamedLUIFunctions.emplace("IEEDICEJE", "SetCodcastingEnabledInParty");
	s_NamedLUIFunctions.emplace("DHGIIEGFD", "IsCodcastingEnabled");
	s_NamedLUIFunctions.emplace("DIHECGCADG", "SetTeamAssignmentEnabled");
	s_NamedLUIFunctions.emplace("DCGBEGCEHA", "IsTeamAssignmentEnabled");
	s_NamedLUIFunctions.emplace("CDECJJACIA", "IsMemberMLGSpectator");
	s_NamedLUIFunctions.emplace("BFFCJFHJJB", "IsLocalMemberMLGSpectator");
	s_NamedLUIFunctions.emplace("ECDIEIDDGH", "SetExtinctionDifficulty");
	s_NamedLUIFunctions.emplace("DBAADEHIBB", "GetExtinctionDifficulty");
	s_NamedLUIFunctions.emplace("DGDAAFJDBI", "GetNATType_0");
	s_NamedLUIFunctions.emplace("FJCJFBBF", "AreAllPlayersMuted");
	s_NamedLUIFunctions.emplace("DCFAJHCAEF", "MuteAllPlayers");
	s_NamedLUIFunctions.emplace("CDFGBDCJGC", "MuteAllPlayersButParty");
	s_NamedLUIFunctions.emplace("CJHJHHGADH", "MuteAllPlayersButFriends");
	s_NamedLUIFunctions.emplace("EDCGIHDGA", "UnmuteAllPlayers");
	s_NamedLUIFunctions.emplace("DDEDGGBHJ", "SetPartyPrivacySetting");
	s_NamedLUIFunctions.emplace("BCBBBABFFB", "GetPartyPrivacySetting");
	s_NamedLUIFunctions.emplace("DAFCJHFFAF", "SetPartySquadAutofill");
	s_NamedLUIFunctions.emplace("CJHICGEEFD", "GetPartySquadAutofill");
	s_NamedLUIFunctions.emplace("DJJCFGDGGC", "IsInviteOnly");
	s_NamedLUIFunctions.emplace("BBDICGHE", "IsInLobby");
	s_NamedLUIFunctions.emplace("BJEABAEHDE", "IsBackingOut");
	s_NamedLUIFunctions.emplace("DGHJAEEIHA", "GetNumLobbyMembers");
	s_NamedLUIFunctions.emplace("CCHEBJJJEB", "GetActivePartyMemberXUID");
	s_NamedLUIFunctions.emplace("CJBCBFEAEC", "GetActivePartyMemberXUIDString");
	s_NamedLUIFunctions.emplace("DDADACHHAE", "IsMemberInParty");
	s_NamedLUIFunctions.emplace("CHBBHFHJEH", "IsLocalPlayer");
	s_NamedLUIFunctions.emplace("BGHECFACAB", "GetGamertag");
	s_NamedLUIFunctions.emplace("BJBCAJFECC", "ShowGamerCard");
	s_NamedLUIFunctions.emplace("BEDFEBGCHG", "ShowGamerCardWithPlatformId");
	s_NamedLUIFunctions.emplace("GICFBJBBJ", "ShowGamerCardWithXuidString");
	s_NamedLUIFunctions.emplace("CHICEBEEEI", "ToggleMute");
	s_NamedLUIFunctions.emplace("CGCFCDJBH", "ToggleMuteWithXuidString");
	s_NamedLUIFunctions.emplace("BJFFJACJDD", "GetMuteStrategy");
	s_NamedLUIFunctions.emplace("HCCAGAJGJ", "SetMuteStrategy");
	s_NamedLUIFunctions.emplace("BFGAACEHBH", "MuteAll");
	s_NamedLUIFunctions.emplace("CBBJBJCFAE", "MigrateHost");
	s_NamedLUIFunctions.emplace("DBCCDEIGCI", "BatchKickPlayer");
	s_NamedLUIFunctions.emplace("DFFAEAIHGG", "KickPlayer");
	s_NamedLUIFunctions.emplace("BIHAGFBBAG", "ReportPlayer");
	s_NamedLUIFunctions.emplace("EABEDBIGHD", "IsGameStartRequested");
	s_NamedLUIFunctions.emplace("CGEIEECJJH", "GetPartyUIRoot");
	s_NamedLUIFunctions.emplace("EAHFJBBBBD", "SetPartyUIRoot");
	s_NamedLUIFunctions.emplace("DDDCGDHHJF", "WakeLobbyParty");
	s_NamedLUIFunctions.emplace("BHDJFHEDJG", "WakePrivateParty");
	s_NamedLUIFunctions.emplace("DFJICHHJFI", "PopulatePlaylistDataModel");
	s_NamedLUIFunctions.emplace("BFBCBFEGFI", "SetDesiredLobbyTeamSelection");
	s_NamedLUIFunctions.emplace("HIJBFHIGF", "SwitchPlayersIndex");
	s_NamedLUIFunctions.emplace("DCGHHFGDCE", "AssignPlayerTeam");
	s_NamedLUIFunctions.emplace("CJDCCHGIBC", "IsAnyDraftMemberAutoAssign");
	s_NamedLUIFunctions.emplace("CAADHCGGHA", "IsAnyDraftMemberSplitscreen");
	s_NamedLUIFunctions.emplace("FHHCDABDD", "StartPrivateDS");
	s_NamedLUIFunctions.emplace("EBFDFHJDJG", "CanCancelPrivateDSMatch");
	s_NamedLUIFunctions.emplace("BEDBHJJHDC", "CancelPrivateDSMatch");

	// LobbyMember_methods
	s_NamedLUIFunctions.emplace("BABJJDBHCH", "SetLocalMemberMLGSpectator");
	s_NamedLUIFunctions.emplace("IFIJDJICI", "SetLocalMemberIsFollower");
	s_NamedLUIFunctions.emplace("CGEEIHHBAA", "SetLocalMemberFollowerIndex");
	
	// s_playerDataFunctions
	s_NamedLUIFunctions.emplace("BFFBGAJGD", "IO");
	s_NamedLUIFunctions.emplace("IIGEGHFJC", "SetValue");
	s_NamedLUIFunctions.emplace("EBFGJFIAJI", "GetRootDDLState");
	s_NamedLUIFunctions.emplace("BBGDDCBFHA", "IsArray");

	// Invitation_methods
	s_NamedLUIFunctions.emplace("DHACFECHAG", "AcceptInvitation");
	s_NamedLUIFunctions.emplace("DIDIHAJHGA", "SendInvitation");
	s_NamedLUIFunctions.emplace("CEIJEHAJHE", "BatchInviteOnlineFriends");
	s_NamedLUIFunctions.emplace("ECGAJEGAIC", "IsUserJoinButtonDisabled");
	s_NamedLUIFunctions.emplace("DCDABCADAF", "IsUserInviteButtonDisabled");

	// AAR_methods
	s_NamedLUIFunctions.emplace("DBIGAJIAFG", "Reset");
	s_NamedLUIFunctions.emplace("BIJEDCBCBH", "GetData");
	s_NamedLUIFunctions.emplace("BIDDAGGGI", "AddCPPoints");

	// AAR_methods_0
	s_NamedLUIFunctions.emplace("DEFDBJBAJ", "CompletedABTestingEnrollment");

	// AccountRegistration_methods
	s_NamedLUIFunctions.emplace("GGBDJFJD", "GetPendingRegistrationController");
	s_NamedLUIFunctions.emplace("BAIIEEHFHA", "CreateAnonymous");
	s_NamedLUIFunctions.emplace("CIJBBHJIBH", "LoginExisting");
	s_NamedLUIFunctions.emplace("HHIGGAHGI", "CreateFull");
	s_NamedLUIFunctions.emplace("DEEHFICICB", "Cancel");
	s_NamedLUIFunctions.emplace("ECFGACAABI", "GetAccountInfo");
	s_NamedLUIFunctions.emplace("DDIDDAGHJF", "GetAutoFillInfo");
	s_NamedLUIFunctions.emplace("BEJFHBHICG", "GetAutoRegistrationState");
	s_NamedLUIFunctions.emplace("BAADBIECDG", "IsAutoRegistrationEnabled");
	s_NamedLUIFunctions.emplace("IJBAAJFGB", "UpgradeToFull");
	s_NamedLUIFunctions.emplace("EGAIABAAG", "UpgradeFromExisting");
	s_NamedLUIFunctions.emplace("BDBAJHGFE", "RenameAccount");
	s_NamedLUIFunctions.emplace("CJDEJAEFGB", "ChangeEmail");
	s_NamedLUIFunctions.emplace("CEDFJJCJJD", "IsFullAccount");
	s_NamedLUIFunctions.emplace("DFDBHJBGBI", "CheckUsernameString");
	s_NamedLUIFunctions.emplace("DIBHDDJHG", "SanitizeUTF8String");
	s_NamedLUIFunctions.emplace("DJEIHHEBB", "GetAccountAge");

	// Regulations_methods
	s_NamedLUIFunctions.emplace("BGEIIEHJFD", "IsRegulationEnforced");
	s_NamedLUIFunctions.emplace("BHFFIJBAEG", "GetRegulationPreference");
	s_NamedLUIFunctions.emplace("DAACCJJHEG", "SetRegulationPreference");
	s_NamedLUIFunctions.emplace("CFAEACEIIJ", "FetchEnforcement");
	s_NamedLUIFunctions.emplace("BHGHHDJBGF", "FetchPreferences");

	// Loot_methods_0
	s_NamedLUIFunctions.emplace("BIAFIDCIHB", "GetInventory");
	s_NamedLUIFunctions.emplace("DEBEIFJEEG", "IsOwned");
	s_NamedLUIFunctions.emplace("HAJHHFGJJ", "PurchaseItem");
	s_NamedLUIFunctions.emplace("DFGDFABGBE", "GiveLoot");
	s_NamedLUIFunctions.emplace("HIIIHAGGG", "DeleteInventory");
	s_NamedLUIFunctions.emplace("BHGAGDAC", "UseDoubleXPToken");
	s_NamedLUIFunctions.emplace("BCBAGDEJAJ", "GetCategoryNewIDs");
	s_NamedLUIFunctions.emplace("DAFIICDBFJ", "IsCategoryNew");
	s_NamedLUIFunctions.emplace("GADJEFJEA", "ClearCategoryNew");
	s_NamedLUIFunctions.emplace("HDJCADADF", "IsLootNew");
	s_NamedLUIFunctions.emplace("BCAACADBEA", "ClearLootNew");
	s_NamedLUIFunctions.emplace("DAGICBIGDH", "SetLootAsNew");
	s_NamedLUIFunctions.emplace("BGHDGFBGCA", "InvalidLootError");
	s_NamedLUIFunctions.emplace("CHFGBGCCC", "GetRangeDetails");
	s_NamedLUIFunctions.emplace("DGJJHEHII", "GetNewTournamentRewards");
	s_NamedLUIFunctions.emplace("BCBJJICIBA", "ValidateAndStoreContentCreator");
	s_NamedLUIFunctions.emplace("DBHFICJCGE", "IsContentCreatorCodeExpired");
	s_NamedLUIFunctions.emplace("BGIBBGIIDJ", "GetContentCreatorCode");

	// battlepass_methods
	s_NamedLUIFunctions.emplace("BAGCGCIHAF", "GetXP");
	s_NamedLUIFunctions.emplace("GAICDBJEC", "Purchase");
	s_NamedLUIFunctions.emplace("CBHBFIJDHG", "Activate");
	s_NamedLUIFunctions.emplace("BHAGDBCJDJ", "SendEvent");
	s_NamedLUIFunctions.emplace("DEBEIFJEEG", "IsOwned");
	s_NamedLUIFunctions.emplace("DFIJFJGED", "NeedFixUp");
	s_NamedLUIFunctions.emplace("BEBDCFAHB", "FixUp");

	// NetworkInfo_Methods
	s_NamedLUIFunctions.emplace("DDADIHAFHH", "IsConnectedToFirstParty");
	s_NamedLUIFunctions.emplace("FIDJJHHCA", "IsConnectedToDW");
	s_NamedLUIFunctions.emplace("DGDAAFJDBI", "GetNATType");
	s_NamedLUIFunctions.emplace("HGEFAEJCE", "GetBandwidth");
	s_NamedLUIFunctions.emplace("DCFDACAGBG", "IsOnWirelessConnection");
	s_NamedLUIFunctions.emplace("BGJIBGHBAG", "GetNetworkRegionString");
	s_NamedLUIFunctions.emplace("BBJBJGDIGD", "GetExternalIP");
	s_NamedLUIFunctions.emplace("DBDIHEIEGB", "GetInternalIP");
	s_NamedLUIFunctions.emplace("CJDAIBFGGI", "GetFenceStateString");
	s_NamedLUIFunctions.emplace("DGBIGGGJGC", "HasValidDCQoSResult");

	// progression_methods
	s_NamedLUIFunctions.emplace("CBJHJGIGDA", "GetPlayerXP");
	s_NamedLUIFunctions.emplace("BDHJABHDDC", "GetPlayerRank");
	s_NamedLUIFunctions.emplace("DFDGDCIAHI", "GetSeasonXP");
	s_NamedLUIFunctions.emplace("CFEDCBACGI", "GetSeasonRank");
	s_NamedLUIFunctions.emplace("BHFJJDBEHG", "GetSeasonChallengeProgress");
	s_NamedLUIFunctions.emplace("BIDJFJIHC", "GetTokenAmount");
	s_NamedLUIFunctions.emplace("DCAHGJEDJJ", "ActivateToken");
	s_NamedLUIFunctions.emplace("CEHEBBGFGG", "GetTokenExpirations");
	s_NamedLUIFunctions.emplace("HGBFIHEHE", "CheckSinglePlayerRewards");
	s_NamedLUIFunctions.emplace("IAFJCICDC", "GetPlayerLevelXP");
	s_NamedLUIFunctions.emplace("DABCDDIHDG", "GetPlayerLevelRank");
	s_NamedLUIFunctions.emplace("CCIEBBDDFH", "RewardPlayerBROnboarding");
	s_NamedLUIFunctions.emplace("DFBEBDGCHJ", "GetPlayerBROnboardingRewarded");
	s_NamedLUIFunctions.emplace("CHAHIBGCEG", "RewardPlayerForTrialEvent");
	s_NamedLUIFunctions.emplace("CCIBICJFFC", "GetPlayerTrialEventRewarded");

	// community_challenges_methods
	s_NamedLUIFunctions.emplace("DACBGIEGAA", "GetCommunityInfo");

	// scheduled_challenges_methods
	s_NamedLUIFunctions.emplace("JCAAACBBI", "GetBRDailyChallenges");
	s_NamedLUIFunctions.emplace("BCFEBEHEBI", "GetBRWeeklyChallenges");
	s_NamedLUIFunctions.emplace("DCIDHEEHJA", "GetDailyChallenges");
	s_NamedLUIFunctions.emplace("EBFEIJBCEC", "GetWeeklyChallenges");
	s_NamedLUIFunctions.emplace("DCBCJDCGGB", "GetCPDailyChallenges");

	// quests_methods
	s_NamedLUIFunctions.emplace("DDCDGAJBBD", "StartQuest");
	s_NamedLUIFunctions.emplace("CCBJIDFAHE", "GetProgression");
	s_NamedLUIFunctions.emplace("BGDHBAIDHJ", "GetRewards");
	s_NamedLUIFunctions.emplace("BJFBIJDAEE", "EndQuest");
	s_NamedLUIFunctions.emplace("BCIHEIDCGD", "GetActiveQuest");
	s_NamedLUIFunctions.emplace("CFBCBFIIHA", "GetActivatingQuestMode");

	// trials_methods
	s_NamedLUIFunctions.emplace("DCEJEBIAFF", "StartTrial");
	s_NamedLUIFunctions.emplace("BGDHBAIDHJ", "GetRewards_0");
	s_NamedLUIFunctions.emplace("BHBDDIGEFJ", "GetStatus");

	// Store_methods
	s_NamedLUIFunctions.emplace("DEHDGCEDG", "HasStoreData");
	s_NamedLUIFunctions.emplace("EHGIGBJJC", "GetStoreData");
	s_NamedLUIFunctions.emplace("DBFHBBIDHD", "GetCategoryData");
	s_NamedLUIFunctions.emplace("CIFIHAAJGD", "GetLayoutData");
	s_NamedLUIFunctions.emplace("CDHBJGJJBB", "GetRecommendations");
	s_NamedLUIFunctions.emplace("IAACDBFDC", "GetRecommendationsAvailabilityTimes");

	// Gunsmith_methods
	s_NamedLUIFunctions.emplace("BEDFIJHAB", "GetWeaponInfo");
	s_NamedLUIFunctions.emplace("CEFIIHJEFG", "GetChallengeInfo");
	s_NamedLUIFunctions.emplace("CEBFICDDGD", "GetReticleInfo");
	s_NamedLUIFunctions.emplace("CCJIIFCJHA", "GetBlueprintData");
	s_NamedLUIFunctions.emplace("CDEJBFGGAG", "SetBlueprintData");
	s_NamedLUIFunctions.emplace("DAJAJGBAEF", "UploadBlueprintData");
	s_NamedLUIFunctions.emplace("BEECGHGGBE", "HasBlueprintData");
	s_NamedLUIFunctions.emplace("CIJGBIFEIF", "GetGunUnlockInfo");
	s_NamedLUIFunctions.emplace("BICGDCCGCI", "GetWeaponMasteryInfo");

	// misc_challenges_methods
	s_NamedLUIFunctions.emplace("DFHEFHDCFC", "GetMiscChallengeInfo");
	s_NamedLUIFunctions.emplace("CJJHIEDGGG", "GetMiscChallengeInfoByRef");

	// Challenges_Methods
	s_NamedLUIFunctions.emplace("DFGEFGFCFC", "SendChallengeUserEvent");
	s_NamedLUIFunctions.emplace("CBHBFIJDHG", "ActivateOnlineChallenge");
	s_NamedLUIFunctions.emplace("CFECFHHFFD", "DeactivateOnlineChallenge");
	s_NamedLUIFunctions.emplace("DACAFJIGJI", "ChallengeDataFetched");
	s_NamedLUIFunctions.emplace("BCDGBFFIIB", "GetChallengeByIndex");
	s_NamedLUIFunctions.emplace("BCBDGDAHIC", "GetChallengeByName");

	// s_playerDataFunctions_0
	s_NamedLUIFunctions.emplace("EDEJFEBFF", "GetModelForField");
	s_NamedLUIFunctions.emplace("DHIICCFFFD", "Cleanup");
}

void WriteToLuiDumpFile(const std::string& content) {
	static bool writingToFile = false;
	std::ofstream file("luidump.txt", writingToFile ? std::ios::app : std::ios::trunc);

	if (file.is_open()) {
		file << content;
		file.close();
	}
	writingToFile = true;
}

template <>
void Client::Hook::Hooks::HK_luaL_openlib::hkCallback(IW8::lua_State* L, const char* libname, const IW8::luaL_Reg* l, std::uint32_t nup) {
	static bool dumpLuiFuncs = Common::Utility::Flags::HasFlag("luidump");
	if (libname != nullptr) {
		InitNamedLUIFunctions();
#		if LOG_LUA_FUNCTION_REGISTRY
			Common::Utility::NT::Library gameLib = Common::Utility::NT::Library();
			std::size_t gameBase = reinterpret_cast<std::size_t>(gameLib.GetPtr());
#		endif
		for (IW8::luaL_Reg* f = const_cast<IW8::luaL_Reg*>(l); f; ++f) {
			if (f->m_Name == nullptr) {
				break;
			}
			
			std::string fullName = std::format("{}.{}", libname, f->m_Name);
			std::size_t funcAddr = reinterpret_cast<std::size_t>(f->m_Func);

			if (dumpLuiFuncs) {
				std::string named = f->m_Name;
				auto it = s_NamedLUIFunctions.find(named);
				if (it != s_NamedLUIFunctions.end()) {
					named = it->second;
				}
				WriteToLuiDumpFile(std::format("{}.{} = {}\n", libname, named, AndRel(funcAddr)));
			}

#			if LOG_LUA_FUNCTION_REGISTRY
				LOG("Game/luaL_openlib", DEBUG, "Registering Lua function \"{}.{}\" at 0x{:016X} ({}+0x{:016X})", libname, f->m_Name, funcAddr,
					gameLib.GetName(), funcAddr - gameBase);
#			endif

			HookPlate::LuaHookStore::HookData* hook = g_Hooks->m_LuaHookStore.FindHook(fullName.c_str());
			if (hook != nullptr) {
				hook->Hook(f);
			}
		}
	}

	return m_Original(L, libname, l, nup);
}
